{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Dm8J-NbMnGHl3gwWCxoPQRPOpyi1eJar","timestamp":1672038332468}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["# Расчёты в этом Colab отлично дополняются и объясняются материалом презентации.\n","Особено с расчётами производных. См. презентацию"],"metadata":{"id":"jXrK3pKgffdJ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"T4eK37tCGgnJ"},"outputs":[],"source":["import numpy as np\n","\n","# Библиотеки PyTorch\n","import torch \n","import torch.nn as nn # готовые слои (как в Keras)\n","import torch.utils.data as data # работа с загрузчиком данных\n","from torch.autograd import Variable # для автоматического дифференциатора"]},{"cell_type":"markdown","source":["# Тенсоры - основные понятия"],"metadata":{"id":"-c1JUFUnIHZI"}},{"cell_type":"code","source":["# Созданим и выведем тенсоры различных видов\n","\n","# 1) Скалярный тенсор\n","x = torch.tensor(7.)\n","print(x)\n","\n","# 2) Одномерный тенсор (список) типа Float\n","y = torch.FloatTensor([7.3])\n","print(y)\n","\n","# 3) Создание списка заданной длины, заполненного произвольными числами\n","z = torch.FloatTensor(8)\n","print(z)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"omIGnJ8QIMBy","executionInfo":{"status":"ok","timestamp":1672038410540,"user_tz":-180,"elapsed":16,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"13da9c3d-858c-4566-de7a-a9fb1c3b56b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(7.)\n","tensor([7.3000])\n","tensor([6.2379e-35, 0.0000e+00, 3.9236e-44, 0.0000e+00,        nan, 0.0000e+00,\n","        1.3733e-14, 1.2102e+25])\n"]}]},{"cell_type":"code","source":["# В тенсорах используются такие же срезы, как и в Nupy\n","print(z[0])   # Вывод нулевого элемента\n","print(z[::2]) # Вывод каждого второго элемента"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"48wQ5hTdIw4Z","executionInfo":{"status":"ok","timestamp":1672038410541,"user_tz":-180,"elapsed":14,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"719eb227-b8db-4f33-a850-d492a793e516"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(6.2379e-35)\n","tensor([6.2379e-35, 3.9236e-44,        nan, 1.3733e-14])\n"]}]},{"cell_type":"code","source":["# Информация о тензоре\n","print(\"Тенсор x:\")\n","print(\"Размерность тезора:    \", x.dim())\n","print(\"Количество элементов:  \", x.size())\n","print(\"Тип элементов:         \", x.type())\n","print(\"Место тенсора в памяти:\", x.data_ptr())\n","\n","print(\"\\nТенсор y:\")\n","print(\"Размерность тезора:    \", y.dim())\n","print(\"Количество элементов:  \", y.size())\n","print(\"Тип элементов:         \", y.type())\n","print(\"Место тенсора в памяти:\", y.data_ptr())\n","\n","print(\"\\nТенсор z:\")\n","print(\"Размерность тезора:    \", z.dim())\n","print(\"Количество элементов:  \", z.size())\n","print(\"Тип элементов:         \", z.type())\n","print(\"Место тенсора в памяти:\", z.data_ptr())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CMFE0jWJFKN","executionInfo":{"status":"ok","timestamp":1672038410542,"user_tz":-180,"elapsed":12,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"7459693a-bc71-4497-d1c2-691d25810f9d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Тенсор x:\n","Размерность тезора:     0\n","Количество элементов:   torch.Size([])\n","Тип элементов:          torch.FloatTensor\n","Место тенсора в памяти: 111530816\n","\n","Тенсор y:\n","Размерность тезора:     1\n","Количество элементов:   torch.Size([1])\n","Тип элементов:          torch.FloatTensor\n","Место тенсора в памяти: 111530880\n","\n","Тенсор z:\n","Размерность тезора:     1\n","Количество элементов:   torch.Size([8])\n","Тип элементов:          torch.FloatTensor\n","Место тенсора в памяти: 111531136\n"]}]},{"cell_type":"markdown","source":["Immutable и Mutable функции"],"metadata":{"id":"NhFJZofCKAL2"}},{"cell_type":"code","source":["# Immutable функция = Применение функции создаёт копию.\n","\n","row  = torch.IntTensor([-1, 2, -3]) # Создаем тензор\n","rowa = row.abs()\n","print(\"row  =\", row, \"  место в памяти: \", row.data_ptr())\n","print(\"rowa =\", rowa, \"     место в памяти: \", rowa.data_ptr())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C-K8LV1dJ9iJ","executionInfo":{"status":"ok","timestamp":1672038414759,"user_tz":-180,"elapsed":470,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"f0da6fd1-9874-42c4-a2d1-b19898d3e574"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["row  = tensor([-1,  2, -3], dtype=torch.int32)   место в памяти:  111531264\n","rowa = tensor([1, 2, 3], dtype=torch.int32)      место в памяти:  111531008\n"]}]},{"cell_type":"code","source":["# Mutable функция = Функция применяется напрямую к объекту. На который ссылается.\n","\n","rowm  = torch.IntTensor([-1, 2, -3]) # Создаем тензор\n","rowma = rowm.abs_()\n","print(\"rowm  =\", rowm, \"  место в памяти: \", rowm.data_ptr())\n","print(\"rowam =\", rowma, \"  место в памяти: \", rowma.data_ptr())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_b85jM7DLW1E","executionInfo":{"status":"ok","timestamp":1672038415691,"user_tz":-180,"elapsed":5,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"c58b252f-9c4c-4c71-a4ee-39340c5bb149"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["rowm  = tensor([1, 2, 3], dtype=torch.int32)   место в памяти:  111531072\n","rowam = tensor([1, 2, 3], dtype=torch.int32)   место в памяти:  111531072\n"]}]},{"cell_type":"markdown","source":["Каскадное выполнение функций"],"metadata":{"id":"9m3WGmUARVSZ"}},{"cell_type":"code","source":["# Каскады функций благодаря Mutable\n","\n","# Вариант 1\n","x = torch.FloatTensor(2, 3) # Создаем тенсор\n","x.zero_() # Заполняем тенсор нулями\n","print(x)\n","print()\n","\n","# Вариант 2 - каскад\n","x = torch.FloatTensor(2, 3).zero_() # Одновременно создаем тенсор и заполняем нулями\n","print(x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EG8bWAH2RYAE","executionInfo":{"status":"ok","timestamp":1672038417891,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"2f66634d-87b4-49ab-f46f-06196e90c78e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0., 0., 0.],\n","        [0., 0., 0.]])\n","\n","tensor([[0., 0., 0.],\n","        [0., 0., 0.]])\n"]}]},{"cell_type":"markdown","source":["Варианты сложения тенсоров"],"metadata":{"id":"ucOYZbxjTteg"}},{"cell_type":"code","source":["# Сложение скалярных тенсоров\n","\n","x = torch.tensor(3.) # Создаем тензор\n","y = torch.tensor(7.) # Создаем тензор\n","print(\"x:\", x)\n","print(\"y:\", y)\n","print()\n","\n","# Вариант 1\n","z1 = x.add(y)\n","\n","# Вариант 2\n","z2 = torch.add(x, y)\n","\n","# Вариант 3\n","x.add_(y) # Куда будет записан результат?\n","\n","\n","print(\"z1:\", z1)\n","print(\"z2:\", z2)\n","print(\"x: \", x)\n","print(\"y: \", y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nRIA_mozSSaW","executionInfo":{"status":"ok","timestamp":1672039700849,"user_tz":-180,"elapsed":353,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"79da54de-a27f-4440-c26a-c025e5007aa6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x: tensor(3.)\n","y: tensor(7.)\n","\n","z1: tensor(10.)\n","z2: tensor(10.)\n","x:  tensor(10.)\n","y:  tensor(7.)\n"]}]},{"cell_type":"code","source":["# Сложение тенсоров через переопределение оператора +\n","\n","x = torch.tensor(3.)\n","y = torch.tensor(7.)\n","x += y\n","\n","print(x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L5oMXDe4TMyW","executionInfo":{"status":"ok","timestamp":1672038420405,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"d6ff5098-622b-4f6d-8b35-8ecb83747a20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(10.)\n"]}]},{"cell_type":"markdown","source":["Взаимодействие Numpy и PyTorch"],"metadata":{"id":"x4Ny7J2eThUv"}},{"cell_type":"code","source":["a = np.random.rand(2, 2) # Создаем numpy массив размерностью 2 на 2 из случайных чисел\n","a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYKVvMBnTgZT","executionInfo":{"status":"ok","timestamp":1672038421661,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"757ea2b6-428e-48dd-848e-6d6c09007b9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.5135315 , 0.0174265 ],\n","       [0.07124005, 0.47094644]])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Преобразование из NumPy в PyTorch\n","b = torch.from_numpy(a)\n","b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XO2WYYe4UFbU","executionInfo":{"status":"ok","timestamp":1672038422815,"user_tz":-180,"elapsed":6,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"89a4211e-35a5-45c2-f73b-c6791ac77fc7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.5135, 0.0174],\n","        [0.0712, 0.4709]], dtype=torch.float64)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Преобразование из PyTorch в NumPy\n","c = b.numpy()\n","c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HUpuXGm8USEc","executionInfo":{"status":"ok","timestamp":1672038424204,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"cdf61cdb-23e7-4e94-f968-73e0384dc631"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.5135315 , 0.0174265 ],\n","       [0.07124005, 0.47094644]])"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["# Работа с CUDA\n","Необходимо сменить среду выполнения (Runtime) на GPU"],"metadata":{"id":"R7AgACBlUlCa"}},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZPg80IOOUna5","executionInfo":{"status":"ok","timestamp":1672040008689,"user_tz":-180,"elapsed":975,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"9d881726-646a-4aa5-8517-c9689b956f53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Dec 26 07:33:28 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   64C    P0    29W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":["# Создадим тестовый тенсор\n","x = torch.FloatTensor([7.3, 6.5])\n","\n","# Проверка того, что данный тенсор размещен на видеокарте в CUDA\n","is_cuda = x.is_cuda\n","print(x, is_cuda)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lCjyUtHwUvjY","executionInfo":{"status":"ok","timestamp":1672040348319,"user_tz":-180,"elapsed":504,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"25d1c5c9-d750-4bc4-b2e6-b8e248063802"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([7.3000, 6.5000]) False\n"]}]},{"cell_type":"code","source":["# Перенос тенсора из обычной памяти в память видеокарты\n","\n","if not x.is_cuda: # Проверяем, что тенсор не в CUDA\n","  y = x.cuda()    # Размещаем на GPU (есть только Mutable-вариант этой функции)\n","print (y.is_cuda) # Проверям: размещен ли тензор на GPU"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X3dWnA57VdKq","executionInfo":{"status":"ok","timestamp":1672040355628,"user_tz":-180,"elapsed":4179,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"b8aff59a-27db-4831-e03b-378c8a80be6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"code","source":["# Выведем типы данных\n","print(\"Тип x:\", x.type())\n","print(\"Тип y:\", y.type())"],"metadata":{"id":"ZGFZBs59Wzad","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672040393768,"user_tz":-180,"elapsed":331,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"ff953adf-cac7-41d1-f4c5-77bc39f7fecc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Тип x: torch.FloatTensor\n","Тип y: torch.cuda.FloatTensor\n"]}]},{"cell_type":"code","source":["# Тип данных тезнора, хранящегося на CPU отличается от того, что хранится на GPU"],"metadata":{"id":"B6wnaWiIX7Kf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"id":"WG_iZX69WV9X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672040487086,"user_tz":-180,"elapsed":332,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"4e26009b-02c5-4680-fcfb-61d7f49fd8e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Dec 26 07:41:26 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   65C    P0    29W /  70W |    572MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"markdown","source":["# AD (automatic differentiation) - автоматическое дифференцирование"],"metadata":{"id":"AthUYuwxXOsj"}},{"cell_type":"code","source":["# Создаем тензоры и заполняем их значениями\n","x = torch.tensor(5.) # Входное неизменяемое значение\n","w = torch.tensor(2.) # Рандомное число для веса\n","b = torch.tensor(3.) # Рандомное число для смещения\n","\n","# Если мы вычислим значение Y, то получим:\n","# Y = 5*2 + 3 = 13\n","\n","# Создаем переменные для обучения. Укажем, какие значения являются изменяемыми, а какие - нет\n","x = Variable(x) # Неизменяемая пер\n","w = Variable(w, requires_grad=True) # Изменяемая пер\n","b = Variable(b, requires_grad=True) # Изменяемая пер"],"metadata":{"id":"gVYE23arXT28"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Строим вычислительный граф\n","y = w.mul(x).add(b)  # y = w * 5 + b\n","y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-7siTD9Tmdbr","executionInfo":{"status":"ok","timestamp":1672041175288,"user_tz":-180,"elapsed":542,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"c9cba652-7cd7-4b85-fe84-2f66cb86d9e1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(13., grad_fn=<AddBackward0>)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Альтернативный способ записи\n","ya = w*x+b\n","ya"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mft9L0IRmiNZ","executionInfo":{"status":"ok","timestamp":1672041216308,"user_tz":-180,"elapsed":573,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"0625bcbd-a560-4b8e-c71d-345b73f8c089"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(13., grad_fn=<AddBackward0>)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Вычисляем градиент при обратном проходе (Нужно посчитать частные производные)\n","y.backward()\n","\n","# Посмотрим градиенты для каждого из задействованных тензоров\n","print(\"x\", x.grad) # None - т.к. неизменная пер. \n","print(\"w\", w.grad) # неверное значение (при подстановке в формулу)\n","print(\"b\", b.grad) # неверное значение (при подстановке в формулу)\n","\n","# Значения неверны, т.к. это 1ая итерация"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xGiHxpFHnPyk","executionInfo":{"status":"ok","timestamp":1672041350775,"user_tz":-180,"elapsed":403,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"38e26954-84dd-43bc-f5dc-86d7f8a7ce6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x None\n","w tensor(5.)\n","b tensor(1.)\n"]}]},{"cell_type":"markdown","source":["# Напишем свой собственный нейрон"],"metadata":{"id":"BU3oz8_uog3v"}},{"cell_type":"code","source":["#x = torch.randn(1)\n","#y = torch.randn(1)\n","\n","# Случайные значение x и y\n","# цель - подобрать w (weight)\n","x = torch.FloatTensor([-0.6395])\n","y = torch.FloatTensor([-0.4799])\n","x = Variable(x)\n","y = Variable(y)\n","\n","print(\"x:\", x)\n","print(\"y:\", y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_SYegbJqonQD","executionInfo":{"status":"ok","timestamp":1672041607018,"user_tz":-180,"elapsed":383,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"4d4f4874-991d-4fd8-d801-4ddbc7d31f2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x: tensor([-0.6395])\n","y: tensor([-0.4799])\n"]}]},{"cell_type":"code","source":["# Создаем 1 линейный слой \n","# Linear соответствует Dense-слою из библиотеки Keras\n","# 1-й параметр - количество входных элементов\n","# 2-й параметр - количество выходных элементов\n","\n","linear = nn.Linear(1, 1, bias = False) # bias = False - неизменяемый переменная.\n","print('Вес: ', linear.weight) # вычисление предполагаемого веса"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LCSCaH_1pT_2","executionInfo":{"status":"ok","timestamp":1672041680068,"user_tz":-180,"elapsed":628,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"8de9ccc7-7c1e-41a6-b30d-b59b36e794ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Вес:  Parameter containing:\n","tensor([[0.5596]], requires_grad=True)\n"]}]},{"cell_type":"code","source":["-0.6395 * 0.7039"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gZE1YHB7qXpW","executionInfo":{"status":"ok","timestamp":1672041681578,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"e69f8caa-360d-4ef5-b7a3-919329111f6b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.45014404999999996"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Применяем слой для x (делаем prediction)\n","pred = linear(x)\n","print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z9ZppPVwqeL8","executionInfo":{"status":"ok","timestamp":1672041502916,"user_tz":-180,"elapsed":329,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"986bd370-c037-4876-feb2-195dc6f22edd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0.5801], grad_fn=<SqueezeBackward3>)\n"]}]},{"cell_type":"code","source":["# Расчет среднеквадратичной ошибки\n","# Подставить в эту формулу результаты вычислений выше\n","(-0.4501 - (-0.4799))**2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DhhwbtP_q-gc","executionInfo":{"status":"ok","timestamp":1672042006107,"user_tz":-180,"elapsed":3,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"1d06c080-a3f4-448d-8ab2-bcfc559f0872"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0008880399999999996"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Расчет ошибки с помощью стандартной функции PyTorch\n","\n","criterion = nn.MSELoss() # Функция ошибки (средне-квадратичное отклонение)\n","# mse += (y - y_1)**2/n\n","# Считаем ошибку\n","loss = criterion(pred, y)\n","print('ошибка:', loss.item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GdgR3XuTrmUm","executionInfo":{"status":"ok","timestamp":1672042021168,"user_tz":-180,"elapsed":335,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"566bbca9-014b-45bc-ad97-eb8a73af1c60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ошибка: 1.12356698513031\n"]}]},{"cell_type":"code","source":["-2 * (-0.6395) *(-0.4799 - 0.7039 * (-0.6395))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qyMqu3uwx-wD","executionInfo":{"status":"ok","timestamp":1672042543138,"user_tz":-180,"elapsed":433,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"2e409ea6-6136-4518-a7d6-9a6853180f09"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.03805786005000004"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Обратное распространение \n","loss.backward()\n","\n","# Посмотрим на наши градиенты\n","print ('DL/DW: ', linear.weight.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gNwjSF-VyOyZ","executionInfo":{"status":"ok","timestamp":1672042543461,"user_tz":-180,"elapsed":3,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"5bd2dfc4-e239-44af-d6ca-db4aaca5c696"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["DL/DW:  None\n"]}]},{"cell_type":"markdown","source":["Используем оптимизатор"],"metadata":{"id":"Asm6g7-Yypbd"}},{"cell_type":"code","source":["# Создаем оптимизатор\n","optimizer = torch.optim.SGD(linear.parameters(), lr=0.01)\n","# первый - параметры нейронной сети\n","# второй - шаг при градиентном спуске"],"metadata":{"id":"Uw2UYFFJs5lh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["optimizer.param_groups"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7fCYSaCSseE5","executionInfo":{"status":"ok","timestamp":1672042555435,"user_tz":-180,"elapsed":507,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"2069621e-46ba-451e-bd30-ecb7f7176e64"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'params': [Parameter containing:\n","   tensor([[0.5596]], requires_grad=True)],\n","  'lr': 0.01,\n","  'momentum': 0,\n","  'dampening': 0,\n","  'weight_decay': 0,\n","  'nesterov': False,\n","  'maximize': False,\n","  'foreach': None,\n","  'differentiable': False}]"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Делаем один шаг (одну эпоху) градиентного спуска w = w - lr*grad\n","optimizer.step()\n","print(optimizer.param_groups)\n","\n","# Ошибка после оптимизации\n","pred = linear(x) \n","loss = criterion(pred, y)\n","print('ошибка после шага оптимизации: ', loss.item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lia7ZXxVyuLV","executionInfo":{"status":"ok","timestamp":1671999173791,"user_tz":-180,"elapsed":310,"user":{"displayName":"Arkady Romanov","userId":"01213739122118825493"}},"outputId":"34110df8-26ea-43a0-bc4a-804457ce8730"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'params': [Parameter containing:\n","tensor([[0.7603]], requires_grad=True)], 'lr': 0.01, 'momentum': 0, 'dampening': 0, 'weight_decay': 0, 'nesterov': False, 'maximize': False, 'foreach': None, 'differentiable': False}]\n","ошибка после шага оптимизации:  3.973810817115009e-05\n"]}]},{"cell_type":"code","source":["# Сделаем 100 шиклов оптимизации (100 эпох)\n","for i in range(1000):\n","  # Вычислям результат\n","  pred = linear(x) \n","\n","  # Считаем функцию ошибки\n","  loss = criterion(pred, y)\n","\n","  # Обнуляем вручную градиент на каждой итерации\n","  optimizer.zero_grad()\n","\n","  # Выполняем обратное распространение ошибки\n","  loss.backward()\n","\n","  # Делаем шаг градиентного спуска\n","  optimizer.step()\n","\n","  if i%10 == 0:\n","    print(loss.detach()) # .detach() отделяет тензор от вычислительного графа. Используется всегда при выводе значений"],"metadata":{"id":"7KJTZWnDzAJ0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Выведем финальный вес\n","linear.weight"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PZk_fkjD3HhP","executionInfo":{"status":"ok","timestamp":1671999173795,"user_tz":-180,"elapsed":35,"user":{"displayName":"Arkady Romanov","userId":"01213739122118825493"}},"outputId":"489b304a-f042-47d0-ff6b-6322ca8410b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Parameter containing:\n","tensor([[0.7504]], requires_grad=True)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# Предикт с использованием финального веса\n","pred = linear(x)\n","pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wL04awjD3N_y","executionInfo":{"status":"ok","timestamp":1671999173796,"user_tz":-180,"elapsed":17,"user":{"displayName":"Arkady Romanov","userId":"01213739122118825493"}},"outputId":"24d41dee-d519-4446-a036-37016a64514b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([-0.4799], grad_fn=<SqueezeBackward3>)"]},"metadata":{},"execution_count":33}]}]}