{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1UsobDdY8wSo6lA0Tz03oBWRoRTRMrIfT","timestamp":1665996195632}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["Мои заметки:\n","\n","В этом колабе 4 нейросети. Они отвечают за:  \n","1)  \n","2)  \n","3)  \n","4)  "],"metadata":{"id":"ZSBlL2zFG4gC"}},{"cell_type":"code","source":["import numpy as np  # Библиотека работы с массивами\n","import pandas as pd # Библиотека для работы с датафреймами\n","\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import concatenate, Input, Dense, Dropout, BatchNormalization, Flatten\n","from tensorflow.keras import utils\n","from tensorflow.keras.optimizers import Adam, Adagrad\n","from tensorflow.keras.preprocessing.text import Tokenizer, text_to_word_sequence #\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","from sklearn.preprocessing import StandardScaler \n","\n","from google.colab import drive # Подключаем диск Google\n","\n","import re\n","\n","import matplotlib.pyplot as plt # Библиотека для рисования\n","%matplotlib inline"],"metadata":{"id":"YPGGBAIT3KEi","executionInfo":{"status":"ok","timestamp":1666000918468,"user_tz":-180,"elapsed":400,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EjpL09W83obE","executionInfo":{"status":"ok","timestamp":1665998457525,"user_tz":-180,"elapsed":3553,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"6fc19cbc-d762-4233-d737-0959ca04e1f6"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!unzip \"/content/drive/MyDrive/Colab Notebooks/Machine_learning/Datasets/hh_salary.zip\" -d \"/content\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iLQ4IedY7AaR","outputId":"be4e7343-d7ff-4671-f03f-c2dc66846185","executionInfo":{"status":"ok","timestamp":1665996296477,"user_tz":-180,"elapsed":7209,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  /content/drive/MyDrive/Colab Notebooks/Machine_learning/Datasets/hh_salary.zip\n","  inflating: /content/hh_salary.csv  \n"]}]},{"cell_type":"code","execution_count":23,"metadata":{"id":"SGFGTS5_21lR","executionInfo":{"status":"ok","timestamp":1666000933994,"user_tz":-180,"elapsed":15201,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"outputs":[],"source":["hh_df = pd.read_csv('hh_salary.csv')"]},{"cell_type":"code","source":["# Количество резюме и критерии\n","print(hh_df.shape) # Число строк и столбцов в df"],"metadata":{"id":"kdKEnO1d8ZGR","executionInfo":{"status":"ok","timestamp":1665996304943,"user_tz":-180,"elapsed":26,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"a9a38801-7e29-4178-deb4-aee9526ce2ce","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(62967, 13)\n"]}]},{"cell_type":"code","source":["hh_df"],"metadata":{"id":"VHybQ3CI8dNa","executionInfo":{"status":"ok","timestamp":1665996304945,"user_tz":-180,"elapsed":25,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"aeb61d89-ee5a-43d9-b0cf-9face391225e","colab":{"base_uri":"https://localhost:8080/","height":1000}},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Unnamed: 0                                  Пол, возраст           ЗП  \\\n","0               0       Мужчина ,  29 лет , родился 16 мая 1989   40000 руб.   \n","1               1       Мужчина ,  38 лет , родился 25 мая 1980   40000 руб.   \n","2               2      Мужчина ,  35 лет , родился 14 июня 1983  300000 руб.   \n","3               3   Мужчина ,  33 года , родился 2 августа 1985  180000 руб.   \n","4               4  Мужчина ,  22 года , родился 1 сентября 1996   40000 руб.   \n","...           ...                                           ...          ...   \n","62962       62962   Мужчина ,  31 год , родился 11 октября 1987   80000 руб.   \n","62963       62963   Мужчина ,  41 год , родился 13 декабря 1977   50000 руб.   \n","62964       62964   Мужчина ,  26 лет , родился 2 сентября 1992   60000 руб.   \n","62965       62965      Мужчина ,  35 лет , родился 23 июля 1983  190000 руб.   \n","62966       62966  Мужчина ,  35 лет , родился 22 сентября 1983   35000 руб.   \n","\n","                               Ищет работу на должность:  \\\n","0      Специалист по поддержке чата(support team) дом...   \n","1                                Системный администратор   \n","2                    DevOps TeamLead / DevOps архитектор   \n","3                                 Руководитель IT отдела   \n","4                                       Junior Developer   \n","...                                                  ...   \n","62962            Программист PHP (full-stack) (удаленно)   \n","62963  начальник отдела автоматизированных систем упр...   \n","62964          Специалист по информационной безопасности   \n","62965                               Frontend-разработчик   \n","62966                       Монтажник слаботочных систем   \n","\n","                                                   Город  \\\n","0      Новороссийск , готов к переезду (Анапа, Геленд...   \n","1      Новосибирск ,  м. Березовая роща , не готов к ...   \n","2      Москва , готов к переезду , готов к редким ком...   \n","3      Москва ,  м. Щукинская , не готов к переезду ,...   \n","4      Москва ,  м. Юго-Западная , не готов к переезд...   \n","...                                                  ...   \n","62962  Москва ,  м. Белорусская , не готов к переезду...   \n","62963  Киров , не готов к переезду , готов к командир...   \n","62964  Москва , готов к переезду , готов к командировкам   \n","62965  Москва , готов к переезду (Санкт-Петербург, Уф...   \n","62966  Самара , не готов к переезду , готов к команди...   \n","\n","                                               Занятость  \\\n","0                                       полная занятость   \n","1                                       полная занятость   \n","2                                       полная занятость   \n","3                  частичная занятость, полная занятость   \n","4      стажировка, частичная занятость, проектная работа   \n","...                                                  ...   \n","62962  частичная занятость, проектная работа, полная ...   \n","62963                                   полная занятость   \n","62964                                   полная занятость   \n","62965              частичная занятость, полная занятость   \n","62966                                   полная занятость   \n","\n","                                                  График  \\\n","0                                            полный день   \n","1                                            полный день   \n","2                                            полный день   \n","3                          удаленная работа, полный день   \n","4                        гибкий график, удаленная работа   \n","...                                                  ...   \n","62962                                   удаленная работа   \n","62963                                        полный день   \n","62964                                        полный день   \n","62965  гибкий график, полный день, сменный график, ва...   \n","62966                                        полный день   \n","\n","                Опыт (двойное нажатие для полной версии)  \\\n","0      Опыт работы 3 года 9 месяцев  Специалист по по...   \n","1      Опыт работы 11 лет 11 месяцев  Системный админ...   \n","2      Опыт работы 12 лет 11 месяцев  DevOps TeamLead...   \n","3      Опыт работы 15 лет 10 месяцев  Руководитель IT...   \n","4      Опыт работы 1 год 1 месяц  Junior Developer 40...   \n","...                                                  ...   \n","62962  Опыт работы 5 лет 9 месяцев  Программист PHP (...   \n","62963  Опыт работы 15 лет 9 месяцев  Октябрь 2012 — п...   \n","62964  Опыт работы 6 лет 8 месяцев  Специалист по инф...   \n","62965  Опыт работы 15 лет 6 месяцев  Frontend-разрабо...   \n","62966  Опыт работы 3 месяца  Монтажник слаботочных си...   \n","\n","                        Последенее/нынешнее место работы  \\\n","0                                       ООО \"Гольфстрим\"   \n","1                       ООО «Завод модульных технологий»   \n","2                                         Банк ВТБ (ПАО)   \n","3      \"Ай-Теко\", ведущий российский системный интегр...   \n","4                                        R-Style SoftLab   \n","...                                                  ...   \n","62962  Индивидуальное предпринимательство / частная п...   \n","62963                            МРСК Центра и Приволжья   \n","62964       АО \"Восточное оборонное предприятие \"Гранит\"   \n","62965                                          Softailor   \n","62966                                          смт-интех   \n","\n","                           Последеняя/нынешняя должность  \\\n","0                                   Генеральный директор   \n","1                                Системный администратор   \n","2      Начальник отдела методологии разработки (DevOp...   \n","3                        Старший системный администратор   \n","4                                   Менеджер IT-проектов   \n","...                                                  ...   \n","62962                                            фриланс   \n","62963                       зам. руководителя группы АСУ   \n","62964  Инженер по противодействию иностранным техниче...   \n","62965                                Инженер-конструктор   \n","62966                       Монтажник слаботочных систем   \n","\n","                                       Образование и ВУЗ Обновление резюме  \\\n","0      Высшее образование 2011  Международный юридиче...  26.04.2019 08:04   \n","1      Высшее образование 2002 Новосибирский государс...  26.04.2019 04:30   \n","2      DevOps TeamLead / DevOps архитектор 300 000 ру...  09.04.2019 14:40   \n","3      Руководитель IT отдела 180 000 руб. Информацио...  09.04.2019 14:39   \n","4      Junior Developer 40 000 руб. Информационные те...  29.03.2019 12:40   \n","...                                                  ...               ...   \n","62962  Программист PHP (full-stack) (удаленно) 80 000...  12.03.2019 06:43   \n","62963  Высшее образование 2010 Вятский Государственны...  09.05.2019 11:51   \n","62964  Высшее образование 2014  Владивостокский госуд...  26.04.2019 12:47   \n","62965  Frontend-разработчик 190 000 руб. Информационн...  15.03.2019 09:50   \n","62966        Образование Среднее специальное образование  27.04.2019 10:08   \n","\n","                                 Авто  \n","0                          Не указано  \n","1                          Не указано  \n","2                          Не указано  \n","3      Имеется собственный автомобиль  \n","4                          Не указано  \n","...                               ...  \n","62962                      Не указано  \n","62963                      Не указано  \n","62964                      Не указано  \n","62965                      Не указано  \n","62966                      Не указано  \n","\n","[62967 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-899eca92-f6d5-48b9-9f2e-1f5b67bdcae7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Пол, возраст</th>\n","      <th>ЗП</th>\n","      <th>Ищет работу на должность:</th>\n","      <th>Город</th>\n","      <th>Занятость</th>\n","      <th>График</th>\n","      <th>Опыт (двойное нажатие для полной версии)</th>\n","      <th>Последенее/нынешнее место работы</th>\n","      <th>Последеняя/нынешняя должность</th>\n","      <th>Образование и ВУЗ</th>\n","      <th>Обновление резюме</th>\n","      <th>Авто</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Мужчина ,  29 лет , родился 16 мая 1989</td>\n","      <td>40000 руб.</td>\n","      <td>Специалист по поддержке чата(support team) дом...</td>\n","      <td>Новороссийск , готов к переезду (Анапа, Геленд...</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 3 года 9 месяцев  Специалист по по...</td>\n","      <td>ООО \"Гольфстрим\"</td>\n","      <td>Генеральный директор</td>\n","      <td>Высшее образование 2011  Международный юридиче...</td>\n","      <td>26.04.2019 08:04</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Мужчина ,  38 лет , родился 25 мая 1980</td>\n","      <td>40000 руб.</td>\n","      <td>Системный администратор</td>\n","      <td>Новосибирск ,  м. Березовая роща , не готов к ...</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 11 лет 11 месяцев  Системный админ...</td>\n","      <td>ООО «Завод модульных технологий»</td>\n","      <td>Системный администратор</td>\n","      <td>Высшее образование 2002 Новосибирский государс...</td>\n","      <td>26.04.2019 04:30</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Мужчина ,  35 лет , родился 14 июня 1983</td>\n","      <td>300000 руб.</td>\n","      <td>DevOps TeamLead / DevOps архитектор</td>\n","      <td>Москва , готов к переезду , готов к редким ком...</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 12 лет 11 месяцев  DevOps TeamLead...</td>\n","      <td>Банк ВТБ (ПАО)</td>\n","      <td>Начальник отдела методологии разработки (DevOp...</td>\n","      <td>DevOps TeamLead / DevOps архитектор 300 000 ру...</td>\n","      <td>09.04.2019 14:40</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Мужчина ,  33 года , родился 2 августа 1985</td>\n","      <td>180000 руб.</td>\n","      <td>Руководитель IT отдела</td>\n","      <td>Москва ,  м. Щукинская , не готов к переезду ,...</td>\n","      <td>частичная занятость, полная занятость</td>\n","      <td>удаленная работа, полный день</td>\n","      <td>Опыт работы 15 лет 10 месяцев  Руководитель IT...</td>\n","      <td>\"Ай-Теко\", ведущий российский системный интегр...</td>\n","      <td>Старший системный администратор</td>\n","      <td>Руководитель IT отдела 180 000 руб. Информацио...</td>\n","      <td>09.04.2019 14:39</td>\n","      <td>Имеется собственный автомобиль</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Мужчина ,  22 года , родился 1 сентября 1996</td>\n","      <td>40000 руб.</td>\n","      <td>Junior Developer</td>\n","      <td>Москва ,  м. Юго-Западная , не готов к переезд...</td>\n","      <td>стажировка, частичная занятость, проектная работа</td>\n","      <td>гибкий график, удаленная работа</td>\n","      <td>Опыт работы 1 год 1 месяц  Junior Developer 40...</td>\n","      <td>R-Style SoftLab</td>\n","      <td>Менеджер IT-проектов</td>\n","      <td>Junior Developer 40 000 руб. Информационные те...</td>\n","      <td>29.03.2019 12:40</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>62962</th>\n","      <td>62962</td>\n","      <td>Мужчина ,  31 год , родился 11 октября 1987</td>\n","      <td>80000 руб.</td>\n","      <td>Программист PHP (full-stack) (удаленно)</td>\n","      <td>Москва ,  м. Белорусская , не готов к переезду...</td>\n","      <td>частичная занятость, проектная работа, полная ...</td>\n","      <td>удаленная работа</td>\n","      <td>Опыт работы 5 лет 9 месяцев  Программист PHP (...</td>\n","      <td>Индивидуальное предпринимательство / частная п...</td>\n","      <td>фриланс</td>\n","      <td>Программист PHP (full-stack) (удаленно) 80 000...</td>\n","      <td>12.03.2019 06:43</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>62963</th>\n","      <td>62963</td>\n","      <td>Мужчина ,  41 год , родился 13 декабря 1977</td>\n","      <td>50000 руб.</td>\n","      <td>начальник отдела автоматизированных систем упр...</td>\n","      <td>Киров , не готов к переезду , готов к командир...</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 15 лет 9 месяцев  Октябрь 2012 — п...</td>\n","      <td>МРСК Центра и Приволжья</td>\n","      <td>зам. руководителя группы АСУ</td>\n","      <td>Высшее образование 2010 Вятский Государственны...</td>\n","      <td>09.05.2019 11:51</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>62964</th>\n","      <td>62964</td>\n","      <td>Мужчина ,  26 лет , родился 2 сентября 1992</td>\n","      <td>60000 руб.</td>\n","      <td>Специалист по информационной безопасности</td>\n","      <td>Москва , готов к переезду , готов к командировкам</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 6 лет 8 месяцев  Специалист по инф...</td>\n","      <td>АО \"Восточное оборонное предприятие \"Гранит\"</td>\n","      <td>Инженер по противодействию иностранным техниче...</td>\n","      <td>Высшее образование 2014  Владивостокский госуд...</td>\n","      <td>26.04.2019 12:47</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>62965</th>\n","      <td>62965</td>\n","      <td>Мужчина ,  35 лет , родился 23 июля 1983</td>\n","      <td>190000 руб.</td>\n","      <td>Frontend-разработчик</td>\n","      <td>Москва , готов к переезду (Санкт-Петербург, Уф...</td>\n","      <td>частичная занятость, полная занятость</td>\n","      <td>гибкий график, полный день, сменный график, ва...</td>\n","      <td>Опыт работы 15 лет 6 месяцев  Frontend-разрабо...</td>\n","      <td>Softailor</td>\n","      <td>Инженер-конструктор</td>\n","      <td>Frontend-разработчик 190 000 руб. Информационн...</td>\n","      <td>15.03.2019 09:50</td>\n","      <td>Не указано</td>\n","    </tr>\n","    <tr>\n","      <th>62966</th>\n","      <td>62966</td>\n","      <td>Мужчина ,  35 лет , родился 22 сентября 1983</td>\n","      <td>35000 руб.</td>\n","      <td>Монтажник слаботочных систем</td>\n","      <td>Самара , не готов к переезду , готов к команди...</td>\n","      <td>полная занятость</td>\n","      <td>полный день</td>\n","      <td>Опыт работы 3 месяца  Монтажник слаботочных си...</td>\n","      <td>смт-интех</td>\n","      <td>Монтажник слаботочных систем</td>\n","      <td>Образование Среднее специальное образование</td>\n","      <td>27.04.2019 10:08</td>\n","      <td>Не указано</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>62967 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-899eca92-f6d5-48b9-9f2e-1f5b67bdcae7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-899eca92-f6d5-48b9-9f2e-1f5b67bdcae7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-899eca92-f6d5-48b9-9f2e-1f5b67bdcae7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Пример данных\n","n = 0 # Берем первое резюме\n","for i in range(len(hh_df.values[n])): # Выводим значение каждой графы резюме\n","  print(i, \" \", hh_df.values[n][i])"],"metadata":{"id":"6o9B5jow_K05","executionInfo":{"status":"ok","timestamp":1665996305500,"user_tz":-180,"elapsed":568,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"5200b276-8f77-4e30-ac83-e91168a2197f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0   0\n","1   Мужчина ,  29 лет , родился 16 мая 1989\n","2   40000 руб.\n","3   Специалист по поддержке чата(support team) домашний агент\n","4   Новороссийск , готов к переезду (Анапа, Геленджик) , не готов к командировкам\n","5   полная занятость\n","6   полный день\n","7   Опыт работы 3 года 9 месяцев  Специалист по поддержке чата(support team) домашний агент 40 000 руб. Информационные технологии, интернет, телеком Системный администратор Сотовые, Беспроводные технологии Телекоммуникации Занятость: полная занятость График работы: полный день Опыт работы 3 года 9 месяцев Май 2012 — Январь  2016 3 года 9 месяцев ООО \"Гольфстрим\" Республика Башкортостан Строительство, недвижимость, эксплуатация, проектирование ... Строительство жилищное Управление и эксплуатация недвижимости Генеральный директор Руководство, отладка деловых связей, заключение договоров, развитие организации Ключевые навыки Теперь резюме открыто всему интернету — изменить можно в настройках видимости. Заключение договоров Деловое общение Деловая коммуникация Пользователь ПК Ведение переговоров Управление персоналом Деловая переписка Составление договоров Телефонные переговоры Грамотная речь MS Outlook Водительское удостоверение категории B Работа в команде Возникли неполадки. Попробуйте еще раз. Опыт вождения Права категории B Обо мне Электроника, новые технологии, автомобили, охота, природа, музыка, путешествия. Высшее образование 2011 Кликнув на название учебного заведения вы сможете найти кандидатов из этого вуза. Международный юридический институт при Министерстве юстиции Российской Федерации, Москва Юридический факультет, Юриспруденция Знание языков Русский — Родной Английский — A1 — Начальный Гражданство, время в пути до работы Гражданство: Россия Разрешение на работу: Россия Желательное время в пути до работы: Не имеет значения  Опыт работы 3 года 9 месяцев Май 2012 — Январь  2016 3 года 9 месяцев ООО \"Гольфстрим\" Республика Башкортостан Строительство, недвижимость, эксплуатация, проектирование ... Строительство жилищное Управление и эксплуатация недвижимости Генеральный директор Руководство, отладка деловых связей, заключение договоров, развитие организации  Май 2012 — Январь  2016 3 года 9 месяцев ООО \"Гольфстрим\" Республика Башкортостан Строительство, недвижимость, эксплуатация, проектирование ... Строительство жилищное Управление и эксплуатация недвижимости Генеральный директор Руководство, отладка деловых связей, заключение договоров, развитие организации\n","8   ООО \"Гольфстрим\"\n","9   Генеральный директор\n","10   Высшее образование 2011  Международный юридический институт при Министерстве юстиции Российской Федерации, Москва Юридический факультет, Юриспруденция\n","11   26.04.2019 08:04\n","12   Не указано\n"]}]},{"cell_type":"code","source":["# Чистим от ненужных символов\n","hh_df = hh_df.drop(hh_df.columns[0], axis = 1) # Убираем первый столбец с продублированными индексами. Он нам не нужен\n","\n","i=0\n","for j in range(12):  # Для каждого из столбцов таблицы\n","    for i in range(hh_df.shape[0]): # По всем резюме\n","        if type(hh_df.values[i][j])!=float: # если данные текстовые, то заменяем фрагменты кодировки ASCII на отсутствие символов\n","            hh_df.values[i][j] = hh_df.values[i][j].replace(\"\\xa0\",\"\") # \n","            hh_df.values[i][j] = hh_df.values[i][j].replace(\"\\n\",\" \")\n","            hh_df.values[i][j] = hh_df.values[i][j].replace(\"\\r\",\"\") # Символ переноса карретки"],"metadata":{"id":"juknzF2p_g6C","executionInfo":{"status":"ok","timestamp":1666000958199,"user_tz":-180,"elapsed":24215,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Данные о поле и возрасте\n","def getParameterSexAge(arg):\n","  out = [0,0]\n","  #Если М, то 1. По умолчанию 0 - Ж\n","  if \"М\" in arg:\n","    out[0] = 1\n","  # текущий год - год рождения\n","  year_current = 2020\n","  if (len(arg) > 7):\n","    out[1] = year_current - int(re.findall(r'\\d{4}', arg)[0])\n","  return out\n","\n","# Полученный возраст превращаем в класс возрастной категории\n","def getParameterAgeVect(arg):\n","  outClass =int((arg-13)/5)\n","  outClass = max(0, min(10,outClass))\n","  # На выходе получаем вектор с нужной категорией возраста\n","  return list(utils.to_categorical(outClass, 11).astype('int'))\n","\n","\n","# Зарплата\n","def getParameterSalary(arg):\n","    num = arg\n","    # Сначала получаем чистое число, убираем лишние знаки\n","    if (type(num) == str):\n","        num = re.sub(' ','',num)\n","        num = re.sub('[а-яА-ЯёЁ]','',num)\n","        num = re.sub('[a-zA-Z]','',num)\n","        num = num.replace('.','')\n","        \n","        # Получаем чисто валюту, убираем цифры\n","        curr = re.sub('[0-9]','',arg)\n","        curr = curr.replace('.','').strip()\n","        \n","        # Конвертируем в рубли, если валюта\n","        if curr == 'USD':\n","           num = float(num)*65\n","        elif curr == 'KZT':\n","           num = float(num)*0.17\n","        elif curr=='грн':\n","           num = float(num)*2.6\n","        elif curr=='белруб':\n","           num = float(num)*30.5\n","        elif curr=='EUR':\n","           num = float(num)*70\n","        elif curr=='KGS':\n","           num = float(num)*0.9\n","        elif curr=='сум':\n","           num = float(num)*0.007\n","        elif curr=='AZN':\n","           num = float(num)*37.5\n","             \n","    salaryStr = int(num)\n","\n","    return salaryStr\n","\n","\n","# Данные о городе\n","def getParameterCity(arg):\n","  millionCities = \"Новосибирск Екатеринбург Нижний Новгород Казань Челябинск Омск Самара Ростов-на-Дону Уфа Красноярск Пермь Воронеж Волгоград\"\n","  sarg=arg.split(',')\n","  for item in sarg:\n","    item= item.strip()\n","    if item == \"Москва\":          return [1, 0, 0, 0]\n","    if item == \"Санкт-Петербург\": return [0, 1, 0, 0]\n","    if item in millionCities:     return [0, 0, 1, 0]\n","  return [0, 0, 0, 1]\n","\n","# Данные о желаемой занятости\n","def getParameterEmployment(arg):\n","  out= [0, 0, 0, 0]\n","  if (\"стажировка\" in arg):           out[0]=1\n","  if (\"частичная занятость\" in arg):  out[1]=1\n","  if (\"проектная работа\" in arg):     out[2]=1\n","  if (\"полная занятость\" in arg):     out[3]=1\n","  return out\n","\n","# Данные о желаемом графике работы\n","def getParameterSchedule(arg):\n","  out = [0, 0, 0, 0]\n","  if (\"гибкий график\" in arg):    out[0]=1\n","  if (\"полный день\" in arg):      out[1]=1\n","  if (\"сменный график\" in arg):   out[2]=1\n","  if (\"удаленная работа\" in arg): out[3]=1\n","  return out\n","\n","# Данные об образовании\n","def getParameterEducation(arg):\n","  out = [0, 0, 0, 0] #По умолчанию не указано\n","  if arg in \"Высшее Higher education\":  out[0] = 1\n","  if arg in \"Среднее специальное\":      out[1] = 1\n","  if arg in \"Неоконченное высшее\":      out[2] = 1\n","  if arg in \"Среднее образование\":      out[3] = 1\n","  return out\n","\n","# Данные об опыте работы\n","def getParameterExperience(arg):\n","  arg = str(arg)\n","  #Проверяем, если не пустая строка\n","  symbols = 0\n","  years = 0\n","  months = 0\n","  for s in arg:\n","    if (s != \" \"):\n","      symbols += 1\n","  \n","  #Находим индексы пробелов около фразы \"опыт работы\"\n","  if (symbols > 10):\n","      spacesIndexes = []\n","      index = 0\n","      while ((len(spacesIndexes) < 5) & (index < len(arg))):\n","          if (arg[index] == \" \"):\n","              spacesIndexes.append(index)\n","          index += 1\n","\n","      years = 0\n","      months = 0\n","      if (arg[spacesIndexes[2]+1] != \"м\"):\n","         if (len(spacesIndexes) >= 3):\n","            yearsStr = arg[spacesIndexes[1]:spacesIndexes[2]] # Записываем в строку значение лет\n","            years = int(yearsStr)\n","      \n","         if (len(spacesIndexes) >= 5):\n","            monthsStr = arg[spacesIndexes[3]:spacesIndexes[4]] # Записываем в строку значение месяцев\n","            if(arg[spacesIndexes[2]+1] == \"м\"):\n","                months = int(monthsStr)\n","      else:\n","        if (len(spacesIndexes) >= 3):\n","          monthsStr = arg[spacesIndexes[1]:spacesIndexes[2]]\n","          months = int(monthsStr)\n","      \n","  return 12*years+months\n","\n","# Категориальное представление опыта работы\n","def getParameterExperienceVector(arg):\n","  out = getParameterExperience(arg)\n","  outClass = 0\n","  if (out > 6): # если больше 6 месяцев\n","    outClass = 1\n","  if (out > 12): # если больше 12 месяцев\n","    outClass = 2\n","  if (out > 24): # если больше 24 месяцев\n","    outClass = 3\n","  if (out > 36): # если больше 36 месяцев\n","    outClass = 4\n","  if (out > 60): # если больше 60 месяцев\n","    outClass = 5\n","  if (out > 96): # если больше 96 месяцев\n","    outClass = 6\n","  if (out > 120): # если больше 120 месяцев\n","    outClass = 7\n","  if (out > 156): # если больше 156 месяцев\n","    outClass = 8\n","  if (out > 192): # если больше 192 месяцев\n","    outClass = 9 \n","  if (out > 240): # если больше 240 месяцев\n","    outClass = 10\n","  \n","  return list(utils.to_categorical(outClass, 11).astype('int'))\n","\n","# Извлекаем все параметры\n","def getAllParameters(val):\n","  result = getParameterSexAge(val[0])\n","  sex =  result[0]  #getParameterSex() #параметры о поле\n","  age =  getParameterAgeVect(result[1]) #параметры о возрасте\n","  city = getParameterCity(val[3]) #параметры о городе\n","  employment = getParameterEmployment(val[4]) #параметры о желаемой занятости\n","  shedule = getParameterSchedule(val[5]) #параметры о желаемом графике\n","  education = getParameterEducation(val[9]) #параметры об образовании\n","  experience = getParameterExperienceVector(val[6]) #параметры об опыте\n","  out = []\n","  \n","# Склеиваем все параметры в вектор  \n","  out.append(sex)\n","  out += age\n","  out += city\n","  out += employment\n","  out += shedule\n","  out += education\n","  out += experience\n","  \n","  return out\n","\n","# Создаем тренировочную выборку\n","def get01Data(values):\n","  xTrain = []\n","  yTrain = []\n","  \n","  # Предсказывать будем зарплату\n","  for val in values:\n","    y = getParameterSalary(val[1])\n","    \n","    # Все, что не зарплата - обучающая выборка\n","    if (y != -1):\n","      x = getAllParameters(val)\n","      xTrain.append(x)\n","      yTrain.append(y/1000)\n","  \n","  xTrain = np.array(xTrain)\n","  yTrain = np.array(yTrain)\n","  \n","  return (xTrain, yTrain)"],"metadata":{"id":"xCAtno36AAWK","executionInfo":{"status":"ok","timestamp":1666000958200,"user_tz":-180,"elapsed":9,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["# Используем только числовые данные"],"metadata":{"id":"FUczB5oGSoet"}},{"cell_type":"code","source":["(xTrain01, yTrain) = get01Data(hh_df.values) # Извлекаем значения загруженного набора данных"],"metadata":{"id":"iLNkWBrfAZgd","executionInfo":{"status":"ok","timestamp":1666000986175,"user_tz":-180,"elapsed":27982,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Размер набора параметров и зарплат\n","print(xTrain01.shape)\n","print(yTrain.shape)\n","\n","print()\n","\n","# Пример обработанных данных\n","n = 0\n","print(xTrain01[n])\n","print(yTrain[n])"],"metadata":{"id":"jL9_Vx0HAcJe","executionInfo":{"status":"ok","timestamp":1665996354373,"user_tz":-180,"elapsed":17,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"03e6bf72-a317-4629-8c84-9ac8bf0b5e30","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["(62967, 39)\n","(62967,)\n","\n","[1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n"," 0 0]\n","40.0\n"]}]},{"cell_type":"code","source":["# Обучаем модель полученными данными\n","model = Sequential()\n","model.add(BatchNormalization(input_shape=(xTrain01.shape[1],)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(1000, activation='tanh'))\n","model.add(Dense(100, activation='relu'))\n","model.add(Dense(1, activation='linear'))\n","\n","model.compile(optimizer=Adam(learning_rate=1e-5), loss='mse', metrics=['mae'])\n","\n","history = model.fit(xTrain01, \n","                    yTrain, \n","                    epochs=50, \n","                    batch_size=500,\n","                    validation_split=0.15, \n","                    verbose=2)\n","\n","plt.plot(history.history['mae'], \n","         label='Средняя абсолютная ошибка на обучающем наборе')\n","plt.plot(history.history['val_mae'], \n","         label='Средняя абсолютная ошибка на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Средняя абсолютная ошибка')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"uXyoMRgxBVNO","executionInfo":{"status":"ok","timestamp":1665996398268,"user_tz":-180,"elapsed":43909,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"e9cc56ea-f4a7-466b-b5e1-2ff9e98a6bef","colab":{"base_uri":"https://localhost:8080/","height":1000}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","108/108 - 3s - loss: 22725.8770 - mae: 75.9023 - val_loss: 10322.8682 - val_mae: 78.4704 - 3s/epoch - 29ms/step\n","Epoch 2/50\n","108/108 - 0s - loss: 22419.2363 - mae: 73.8573 - val_loss: 9997.0684 - val_mae: 76.3767 - 497ms/epoch - 5ms/step\n","Epoch 3/50\n","108/108 - 0s - loss: 21996.1211 - mae: 70.9310 - val_loss: 9470.2109 - val_mae: 72.8829 - 355ms/epoch - 3ms/step\n","Epoch 4/50\n","108/108 - 0s - loss: 21461.4102 - mae: 67.1135 - val_loss: 8799.0703 - val_mae: 68.2348 - 494ms/epoch - 5ms/step\n","Epoch 5/50\n","108/108 - 0s - loss: 20823.1562 - mae: 62.3905 - val_loss: 8038.1689 - val_mae: 62.7157 - 353ms/epoch - 3ms/step\n","Epoch 6/50\n","108/108 - 0s - loss: 20113.0312 - mae: 57.0069 - val_loss: 7234.5884 - val_mae: 56.7978 - 492ms/epoch - 5ms/step\n","Epoch 7/50\n","108/108 - 0s - loss: 19373.5137 - mae: 51.4105 - val_loss: 6451.5864 - val_mae: 51.1409 - 376ms/epoch - 3ms/step\n","Epoch 8/50\n","108/108 - 0s - loss: 18664.4570 - mae: 46.3640 - val_loss: 5724.4019 - val_mae: 46.3468 - 395ms/epoch - 4ms/step\n","Epoch 9/50\n","108/108 - 0s - loss: 18041.8750 - mae: 42.6362 - val_loss: 5114.3013 - val_mae: 42.9500 - 378ms/epoch - 4ms/step\n","Epoch 10/50\n","108/108 - 0s - loss: 17533.0996 - mae: 40.3107 - val_loss: 4624.2949 - val_mae: 40.9020 - 349ms/epoch - 3ms/step\n","Epoch 11/50\n","108/108 - 0s - loss: 17149.3594 - mae: 39.2656 - val_loss: 4266.6748 - val_mae: 39.9747 - 365ms/epoch - 3ms/step\n","Epoch 12/50\n","108/108 - 0s - loss: 16875.9922 - mae: 38.9945 - val_loss: 4016.6284 - val_mae: 39.7074 - 351ms/epoch - 3ms/step\n","Epoch 13/50\n","108/108 - 0s - loss: 16693.2812 - mae: 39.1845 - val_loss: 3842.7854 - val_mae: 39.7476 - 378ms/epoch - 4ms/step\n","Epoch 14/50\n","108/108 - 0s - loss: 16559.5742 - mae: 39.4320 - val_loss: 3720.2832 - val_mae: 39.9066 - 380ms/epoch - 4ms/step\n","Epoch 15/50\n","108/108 - 0s - loss: 16472.5703 - mae: 39.6613 - val_loss: 3630.7241 - val_mae: 39.9511 - 379ms/epoch - 4ms/step\n","Epoch 16/50\n","108/108 - 0s - loss: 16399.6367 - mae: 39.6714 - val_loss: 3562.9358 - val_mae: 39.8974 - 343ms/epoch - 3ms/step\n","Epoch 17/50\n","108/108 - 0s - loss: 16337.6133 - mae: 39.6059 - val_loss: 3498.1309 - val_mae: 39.8726 - 357ms/epoch - 3ms/step\n","Epoch 18/50\n","108/108 - 0s - loss: 16282.0107 - mae: 39.4776 - val_loss: 3442.4709 - val_mae: 39.6352 - 379ms/epoch - 4ms/step\n","Epoch 19/50\n","108/108 - 0s - loss: 16234.8086 - mae: 39.2162 - val_loss: 3392.9756 - val_mae: 39.3794 - 374ms/epoch - 3ms/step\n","Epoch 20/50\n","108/108 - 0s - loss: 16188.8379 - mae: 39.0622 - val_loss: 3347.1379 - val_mae: 39.1440 - 352ms/epoch - 3ms/step\n","Epoch 21/50\n","108/108 - 0s - loss: 16142.7744 - mae: 38.7158 - val_loss: 3304.8975 - val_mae: 38.8414 - 385ms/epoch - 4ms/step\n","Epoch 22/50\n","108/108 - 0s - loss: 16105.4844 - mae: 38.4442 - val_loss: 3264.0615 - val_mae: 38.5999 - 365ms/epoch - 3ms/step\n","Epoch 23/50\n","108/108 - 0s - loss: 16060.8506 - mae: 38.1512 - val_loss: 3224.8633 - val_mae: 38.3633 - 367ms/epoch - 3ms/step\n","Epoch 24/50\n","108/108 - 0s - loss: 16027.8516 - mae: 37.8036 - val_loss: 3189.4250 - val_mae: 38.0247 - 362ms/epoch - 3ms/step\n","Epoch 25/50\n","108/108 - 0s - loss: 15994.6914 - mae: 37.5649 - val_loss: 3155.5232 - val_mae: 37.8655 - 377ms/epoch - 3ms/step\n","Epoch 26/50\n","108/108 - 0s - loss: 15966.7666 - mae: 37.3581 - val_loss: 3125.2593 - val_mae: 37.5083 - 380ms/epoch - 4ms/step\n","Epoch 27/50\n","108/108 - 0s - loss: 15935.2607 - mae: 36.9061 - val_loss: 3094.4778 - val_mae: 37.2701 - 369ms/epoch - 3ms/step\n","Epoch 28/50\n","108/108 - 0s - loss: 15911.8652 - mae: 36.8251 - val_loss: 3068.0662 - val_mae: 37.0745 - 362ms/epoch - 3ms/step\n","Epoch 29/50\n","108/108 - 0s - loss: 15887.3154 - mae: 36.5582 - val_loss: 3043.0469 - val_mae: 36.8188 - 341ms/epoch - 3ms/step\n","Epoch 30/50\n","108/108 - 0s - loss: 15857.5684 - mae: 36.2093 - val_loss: 3019.3843 - val_mae: 36.6222 - 369ms/epoch - 3ms/step\n","Epoch 31/50\n","108/108 - 0s - loss: 15832.7520 - mae: 36.1108 - val_loss: 2996.8130 - val_mae: 36.4582 - 366ms/epoch - 3ms/step\n","Epoch 32/50\n","108/108 - 0s - loss: 15814.8877 - mae: 35.9187 - val_loss: 2976.2703 - val_mae: 36.2461 - 374ms/epoch - 3ms/step\n","Epoch 33/50\n","108/108 - 0s - loss: 15790.3154 - mae: 35.7175 - val_loss: 2957.1213 - val_mae: 36.0740 - 337ms/epoch - 3ms/step\n","Epoch 34/50\n","108/108 - 0s - loss: 15775.3867 - mae: 35.6333 - val_loss: 2939.7900 - val_mae: 35.9585 - 364ms/epoch - 3ms/step\n","Epoch 35/50\n","108/108 - 0s - loss: 15758.8457 - mae: 35.3621 - val_loss: 2923.4570 - val_mae: 35.8991 - 374ms/epoch - 3ms/step\n","Epoch 36/50\n","108/108 - 0s - loss: 15740.4043 - mae: 35.2926 - val_loss: 2908.0190 - val_mae: 35.6998 - 365ms/epoch - 3ms/step\n","Epoch 37/50\n","108/108 - 0s - loss: 15729.2930 - mae: 35.2785 - val_loss: 2894.8489 - val_mae: 35.5766 - 360ms/epoch - 3ms/step\n","Epoch 38/50\n","108/108 - 0s - loss: 15714.0869 - mae: 35.0777 - val_loss: 2881.9834 - val_mae: 35.5337 - 379ms/epoch - 4ms/step\n","Epoch 39/50\n","108/108 - 0s - loss: 15699.7900 - mae: 35.0631 - val_loss: 2870.8870 - val_mae: 35.4240 - 343ms/epoch - 3ms/step\n","Epoch 40/50\n","108/108 - 0s - loss: 15689.5068 - mae: 34.8947 - val_loss: 2860.2659 - val_mae: 35.4367 - 343ms/epoch - 3ms/step\n","Epoch 41/50\n","108/108 - 0s - loss: 15684.6514 - mae: 34.9142 - val_loss: 2850.0525 - val_mae: 35.3449 - 336ms/epoch - 3ms/step\n","Epoch 42/50\n","108/108 - 0s - loss: 15671.1465 - mae: 34.8340 - val_loss: 2840.7332 - val_mae: 35.2803 - 340ms/epoch - 3ms/step\n","Epoch 43/50\n","108/108 - 0s - loss: 15663.5771 - mae: 34.7392 - val_loss: 2832.5881 - val_mae: 35.2281 - 352ms/epoch - 3ms/step\n","Epoch 44/50\n","108/108 - 0s - loss: 15654.7188 - mae: 34.6150 - val_loss: 2825.4265 - val_mae: 35.1101 - 356ms/epoch - 3ms/step\n","Epoch 45/50\n","108/108 - 0s - loss: 15653.5332 - mae: 34.6259 - val_loss: 2819.6516 - val_mae: 35.1188 - 337ms/epoch - 3ms/step\n","Epoch 46/50\n","108/108 - 0s - loss: 15644.9814 - mae: 34.5121 - val_loss: 2812.9219 - val_mae: 35.0611 - 371ms/epoch - 3ms/step\n","Epoch 47/50\n","108/108 - 0s - loss: 15638.3662 - mae: 34.5225 - val_loss: 2806.4832 - val_mae: 35.0881 - 372ms/epoch - 3ms/step\n","Epoch 48/50\n","108/108 - 0s - loss: 15625.7246 - mae: 34.5524 - val_loss: 2801.2864 - val_mae: 35.0061 - 368ms/epoch - 3ms/step\n","Epoch 49/50\n","108/108 - 0s - loss: 15623.6289 - mae: 34.4084 - val_loss: 2795.6982 - val_mae: 34.9708 - 343ms/epoch - 3ms/step\n","Epoch 50/50\n","108/108 - 0s - loss: 15623.3096 - mae: 34.4916 - val_loss: 2791.1235 - val_mae: 34.9037 - 343ms/epoch - 3ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Делаем предсказание и приводим его к начальному виду\n","pred = model.predict(xTrain01)\n","pred = pred.flatten()\n","\n","# Среднее значение ошибки \n","delta = pred - yTrain\n","absDelta = abs(delta)\n","print(sum(absDelta) / len(absDelta))"],"metadata":{"id":"NMKwVrgEBw9H","executionInfo":{"status":"ok","timestamp":1665996417972,"user_tz":-180,"elapsed":4556,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b068b504-d0ca-4dbf-f12b-4893c310e805"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["1968/1968 [==============================] - 3s 2ms/step\n","34.45563804342027\n"]}]},{"cell_type":"code","source":["# В качестве нормализации данных используем готовую библиотеку \n","yScaler = StandardScaler()\n","\n","# Скармливаем объекту двумерный вектор\n","yScaler.fit(yTrain.reshape(-1, 1))\n","\n","# Нормализуем по нормальному распределению\n","yTrainScaled = yScaler.transform(yTrain.reshape(-1, 1))\n","\n","print(yTrainScaled.shape)\n","print(yTrain[1])\n","print(yTrainScaled[1])"],"metadata":{"id":"CK7QU5eKB21f","executionInfo":{"status":"ok","timestamp":1665996421270,"user_tz":-180,"elapsed":282,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3f6de0dd-d5df-4bd8-ae5a-643178545ee2"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(62967, 1)\n","40.0\n","[-0.3025949]\n"]}]},{"cell_type":"code","source":["print(min(yTrain), max(yTrain))\n","print(min(yTrainScaled), max(yTrainScaled))"],"metadata":{"id":"fo5RpUOIB6YV","executionInfo":{"status":"ok","timestamp":1665996427289,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"450a5ea9-f603-4b0c-951d-7f17bd63fd99"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["0.001 24700.0\n","[-0.62864885] [200.71469124]\n"]}]},{"cell_type":"code","source":["# Обучаем модель стандартизированными данными\n","modelS = Sequential()\n","modelS.add(BatchNormalization(input_shape=(xTrain01.shape[1],)))\n","modelS.add(Dense(128, activation='relu'))\n","modelS.add(Dense(1000, activation='tanh'))\n","modelS.add(Dense(100, activation='relu'))\n","modelS.add(Dense(1, activation='linear'))\n","\n","modelS.compile(optimizer=Adam(learning_rate=1e-5), loss='mse', metrics=['mae'])\n","\n","history = modelS.fit(xTrain01, \n","                    yTrainScaled, \n","                    epochs=50, \n","                    batch_size=1500,\n","                    validation_split=0.15, \n","                    verbose=2)\n","\n","plt.plot(history.history['mae'], \n","         label='Средняя абсолютная ошибка на обучающем наборе')\n","plt.plot(history.history['val_mae'], \n","         label='Средняя абсолютная ошибка на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Средняя абсолютная ошибка')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"aOtuHDKeB79s","executionInfo":{"status":"ok","timestamp":1665996448026,"user_tz":-180,"elapsed":14901,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"1d867087-0a02-4736-a444-1034fe7fd18f"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","36/36 - 1s - loss: 1.1515 - mae: 0.3880 - val_loss: 0.2645 - val_mae: 0.3516 - 960ms/epoch - 27ms/step\n","Epoch 2/50\n","36/36 - 0s - loss: 1.0927 - mae: 0.3352 - val_loss: 0.2396 - val_mae: 0.3388 - 280ms/epoch - 8ms/step\n","Epoch 3/50\n","36/36 - 1s - loss: 1.0663 - mae: 0.3089 - val_loss: 0.2220 - val_mae: 0.3266 - 680ms/epoch - 19ms/step\n","Epoch 4/50\n","36/36 - 0s - loss: 1.0534 - mae: 0.2967 - val_loss: 0.2100 - val_mae: 0.3163 - 445ms/epoch - 12ms/step\n","Epoch 5/50\n","36/36 - 0s - loss: 1.0467 - mae: 0.2888 - val_loss: 0.2020 - val_mae: 0.3099 - 394ms/epoch - 11ms/step\n","Epoch 6/50\n","36/36 - 0s - loss: 1.0428 - mae: 0.2861 - val_loss: 0.1956 - val_mae: 0.2982 - 411ms/epoch - 11ms/step\n","Epoch 7/50\n","36/36 - 0s - loss: 1.0402 - mae: 0.2838 - val_loss: 0.1911 - val_mae: 0.2913 - 343ms/epoch - 10ms/step\n","Epoch 8/50\n","36/36 - 0s - loss: 1.0385 - mae: 0.2820 - val_loss: 0.1880 - val_mae: 0.2885 - 314ms/epoch - 9ms/step\n","Epoch 9/50\n","36/36 - 0s - loss: 1.0370 - mae: 0.2805 - val_loss: 0.1860 - val_mae: 0.2876 - 412ms/epoch - 11ms/step\n","Epoch 10/50\n","36/36 - 0s - loss: 1.0358 - mae: 0.2796 - val_loss: 0.1843 - val_mae: 0.2846 - 319ms/epoch - 9ms/step\n","Epoch 11/50\n","36/36 - 0s - loss: 1.0346 - mae: 0.2790 - val_loss: 0.1830 - val_mae: 0.2817 - 286ms/epoch - 8ms/step\n","Epoch 12/50\n","36/36 - 0s - loss: 1.0337 - mae: 0.2781 - val_loss: 0.1820 - val_mae: 0.2817 - 305ms/epoch - 8ms/step\n","Epoch 13/50\n","36/36 - 0s - loss: 1.0330 - mae: 0.2766 - val_loss: 0.1813 - val_mae: 0.2821 - 269ms/epoch - 7ms/step\n","Epoch 14/50\n","36/36 - 0s - loss: 1.0323 - mae: 0.2775 - val_loss: 0.1810 - val_mae: 0.2806 - 350ms/epoch - 10ms/step\n","Epoch 15/50\n","36/36 - 0s - loss: 1.0316 - mae: 0.2767 - val_loss: 0.1804 - val_mae: 0.2791 - 341ms/epoch - 9ms/step\n","Epoch 16/50\n","36/36 - 0s - loss: 1.0313 - mae: 0.2753 - val_loss: 0.1799 - val_mae: 0.2793 - 326ms/epoch - 9ms/step\n","Epoch 17/50\n","36/36 - 0s - loss: 1.0305 - mae: 0.2749 - val_loss: 0.1799 - val_mae: 0.2795 - 306ms/epoch - 8ms/step\n","Epoch 18/50\n","36/36 - 0s - loss: 1.0302 - mae: 0.2746 - val_loss: 0.1796 - val_mae: 0.2794 - 338ms/epoch - 9ms/step\n","Epoch 19/50\n","36/36 - 0s - loss: 1.0296 - mae: 0.2745 - val_loss: 0.1794 - val_mae: 0.2765 - 334ms/epoch - 9ms/step\n","Epoch 20/50\n","36/36 - 0s - loss: 1.0291 - mae: 0.2737 - val_loss: 0.1790 - val_mae: 0.2776 - 304ms/epoch - 8ms/step\n","Epoch 21/50\n","36/36 - 0s - loss: 1.0287 - mae: 0.2732 - val_loss: 0.1788 - val_mae: 0.2780 - 265ms/epoch - 7ms/step\n","Epoch 22/50\n","36/36 - 0s - loss: 1.0284 - mae: 0.2727 - val_loss: 0.1784 - val_mae: 0.2758 - 325ms/epoch - 9ms/step\n","Epoch 23/50\n","36/36 - 0s - loss: 1.0279 - mae: 0.2728 - val_loss: 0.1784 - val_mae: 0.2786 - 256ms/epoch - 7ms/step\n","Epoch 24/50\n","36/36 - 0s - loss: 1.0278 - mae: 0.2727 - val_loss: 0.1783 - val_mae: 0.2773 - 262ms/epoch - 7ms/step\n","Epoch 25/50\n","36/36 - 0s - loss: 1.0276 - mae: 0.2719 - val_loss: 0.1781 - val_mae: 0.2774 - 249ms/epoch - 7ms/step\n","Epoch 26/50\n","36/36 - 0s - loss: 1.0271 - mae: 0.2720 - val_loss: 0.1778 - val_mae: 0.2763 - 252ms/epoch - 7ms/step\n","Epoch 27/50\n","36/36 - 0s - loss: 1.0268 - mae: 0.2716 - val_loss: 0.1778 - val_mae: 0.2746 - 299ms/epoch - 8ms/step\n","Epoch 28/50\n","36/36 - 0s - loss: 1.0266 - mae: 0.2712 - val_loss: 0.1777 - val_mae: 0.2772 - 353ms/epoch - 10ms/step\n","Epoch 29/50\n","36/36 - 0s - loss: 1.0264 - mae: 0.2711 - val_loss: 0.1776 - val_mae: 0.2741 - 322ms/epoch - 9ms/step\n","Epoch 30/50\n","36/36 - 0s - loss: 1.0262 - mae: 0.2705 - val_loss: 0.1774 - val_mae: 0.2750 - 190ms/epoch - 5ms/step\n","Epoch 31/50\n","36/36 - 0s - loss: 1.0259 - mae: 0.2712 - val_loss: 0.1772 - val_mae: 0.2748 - 172ms/epoch - 5ms/step\n","Epoch 32/50\n","36/36 - 0s - loss: 1.0258 - mae: 0.2694 - val_loss: 0.1769 - val_mae: 0.2749 - 170ms/epoch - 5ms/step\n","Epoch 33/50\n","36/36 - 0s - loss: 1.0256 - mae: 0.2707 - val_loss: 0.1771 - val_mae: 0.2751 - 163ms/epoch - 5ms/step\n","Epoch 34/50\n","36/36 - 0s - loss: 1.0255 - mae: 0.2701 - val_loss: 0.1770 - val_mae: 0.2759 - 168ms/epoch - 5ms/step\n","Epoch 35/50\n","36/36 - 0s - loss: 1.0251 - mae: 0.2701 - val_loss: 0.1769 - val_mae: 0.2738 - 162ms/epoch - 5ms/step\n","Epoch 36/50\n","36/36 - 0s - loss: 1.0252 - mae: 0.2700 - val_loss: 0.1771 - val_mae: 0.2720 - 163ms/epoch - 5ms/step\n","Epoch 37/50\n","36/36 - 0s - loss: 1.0247 - mae: 0.2689 - val_loss: 0.1768 - val_mae: 0.2766 - 162ms/epoch - 4ms/step\n","Epoch 38/50\n","36/36 - 0s - loss: 1.0248 - mae: 0.2700 - val_loss: 0.1767 - val_mae: 0.2725 - 162ms/epoch - 4ms/step\n","Epoch 39/50\n","36/36 - 0s - loss: 1.0246 - mae: 0.2686 - val_loss: 0.1767 - val_mae: 0.2774 - 157ms/epoch - 4ms/step\n","Epoch 40/50\n","36/36 - 0s - loss: 1.0245 - mae: 0.2686 - val_loss: 0.1768 - val_mae: 0.2782 - 164ms/epoch - 5ms/step\n","Epoch 41/50\n","36/36 - 0s - loss: 1.0243 - mae: 0.2692 - val_loss: 0.1765 - val_mae: 0.2738 - 156ms/epoch - 4ms/step\n","Epoch 42/50\n","36/36 - 0s - loss: 1.0238 - mae: 0.2694 - val_loss: 0.1764 - val_mae: 0.2733 - 164ms/epoch - 5ms/step\n","Epoch 43/50\n","36/36 - 0s - loss: 1.0239 - mae: 0.2676 - val_loss: 0.1762 - val_mae: 0.2750 - 170ms/epoch - 5ms/step\n","Epoch 44/50\n","36/36 - 0s - loss: 1.0237 - mae: 0.2680 - val_loss: 0.1762 - val_mae: 0.2753 - 156ms/epoch - 4ms/step\n","Epoch 45/50\n","36/36 - 0s - loss: 1.0235 - mae: 0.2693 - val_loss: 0.1763 - val_mae: 0.2733 - 152ms/epoch - 4ms/step\n","Epoch 46/50\n","36/36 - 0s - loss: 1.0235 - mae: 0.2689 - val_loss: 0.1762 - val_mae: 0.2719 - 154ms/epoch - 4ms/step\n","Epoch 47/50\n","36/36 - 0s - loss: 1.0234 - mae: 0.2678 - val_loss: 0.1761 - val_mae: 0.2717 - 170ms/epoch - 5ms/step\n","Epoch 48/50\n","36/36 - 0s - loss: 1.0232 - mae: 0.2679 - val_loss: 0.1760 - val_mae: 0.2740 - 166ms/epoch - 5ms/step\n","Epoch 49/50\n","36/36 - 0s - loss: 1.0229 - mae: 0.2680 - val_loss: 0.1760 - val_mae: 0.2732 - 159ms/epoch - 4ms/step\n","Epoch 50/50\n","36/36 - 0s - loss: 1.0230 - mae: 0.2676 - val_loss: 0.1760 - val_mae: 0.2725 - 163ms/epoch - 5ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Делаем предсказание и приводим его к начальному виду\n","pred = modelS.predict(xTrain01)\n","predUnscaled = yScaler.inverse_transform(pred).flatten()\n","\n","# Среднее значение ошибки \n","delta = predUnscaled - yTrain\n","absDelta = abs(delta)\n","print(sum(absDelta) / len(absDelta))"],"metadata":{"id":"ksccR_8NCHHJ","executionInfo":{"status":"ok","timestamp":1665996505043,"user_tz":-180,"elapsed":6130,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"08ce7919-dd4d-48ce-b694-ad908eb15bd5"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["1968/1968 [==============================] - 3s 2ms/step\n","32.80045860700153\n"]}]},{"cell_type":"markdown","source":["### Оценка результатов"],"metadata":{"id":"JY07_85iCSzH"}},{"cell_type":"code","source":["yy = model.predict(xTrain01) # Результат для всего тренировочного набора"],"metadata":{"id":"7pR9SaTzCRqP","executionInfo":{"status":"ok","timestamp":1665996602735,"user_tz":-180,"elapsed":4333,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"84638908-88f7-4808-c11e-0b37cebe4f58"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["1968/1968 [==============================] - 3s 2ms/step\n"]}]},{"cell_type":"code","source":["n = 10\n","for i in range(n):\n","  print('Реальное значение - ',yTrain[i], \" Предсказанное значение - \", yy[i][0], \" Разница - \", abs(yTrain[i]-yy[i][0]))"],"metadata":{"id":"s-eqFjAcCrXw","executionInfo":{"status":"ok","timestamp":1665996605529,"user_tz":-180,"elapsed":362,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9de06530-c7fa-4231-e304-563040990f7b"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Реальное значение -  40.0  Предсказанное значение -  35.747932  Разница -  4.252067565917969\n","Реальное значение -  40.0  Предсказанное значение -  70.171585  Разница -  30.171585083007812\n","Реальное значение -  300.0  Предсказанное значение -  134.94534  Разница -  165.05465698242188\n","Реальное значение -  180.0  Предсказанное значение -  138.9712  Разница -  41.02879333496094\n","Реальное значение -  40.0  Предсказанное значение -  44.58904  Разница -  4.589038848876953\n","Реальное значение -  200.0  Предсказанное значение -  128.00674  Разница -  71.99325561523438\n","Реальное значение -  120.0  Предсказанное значение -  140.17442  Разница -  20.174423217773438\n","Реальное значение -  50.0  Предсказанное значение -  87.23804  Разница -  37.238037109375\n","Реальное значение -  60.0  Предсказанное значение -  98.20892  Разница -  38.20892333984375\n","Реальное значение -  70.0  Предсказанное значение -  117.96696  Разница -  47.966957092285156\n"]}]},{"cell_type":"markdown","source":["## Нейросеть с простыми текстовыми данными"],"metadata":{"id":"Te56E7tZCyXX"}},{"cell_type":"code","source":["# Выкачиваем данные по профессиям\n","def getXTrainTProf(values):\n","  xTrainTProf = []\n","  \n","  for val in values:\n","    currText = \"\"\n","    if (type(val[2]) != float):\n","      currText += val[2]\n","    if (type(val[7]) != float):\n","      currText += \" \" + val[7]\n","    \n","    if (getParameterSalary(val[1]) != -1): # Проверяем, если есть данные о зарплате\n","      xTrainTProf.append(currText)\n","  \n","  xTrainTProf = np.array(xTrainTProf)\n","  \n","  return xTrainTProf"],"metadata":{"id":"Mq9y4E9BDUGf","executionInfo":{"status":"ok","timestamp":1665996623995,"user_tz":-180,"elapsed":595,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Получаем професии для выборки\n","xTrainTProf = getXTrainTProf(hh_df.values) \n","print(xTrainTProf[123]) # пример профессии 11го резюме"],"metadata":{"id":"i0evibpYC5ki","executionInfo":{"status":"ok","timestamp":1665996629003,"user_tz":-180,"elapsed":734,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1996878-56da-4007-c482-ee3f2f7f7b41"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Аналитик Комсомольская правда, ИД\n"]}]},{"cell_type":"code","source":["# Преобразовываем текстовые данные в числовые/векторные для обучения нейросетью\n","\n","maxWordsCount = 10000 # определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","\n","# для этого воспользуемся встроенной в Keras функцией Tokenizer для разбиения текста и превращения в матрицу числовых значений\n","tokenizer = Tokenizer(num_words=maxWordsCount, filters='!\"#$%&()*+,-–—./:;<=>?@[\\\\]^_`{|}~\\t\\n\\xa0', lower=True, split=' ', oov_token='unknown', char_level=False)\n","# выше задаем параметры:\n","# (num_words=maxWordsCount) - определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","# (filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n') - избавляемся от ненужных символов\n","# (lower=True) - приводим слова к нижнему регистру\n","# (split=' ') - разделяем слова по пробелу\n","# (char_level=False) - просим токенайзер не удалять однобуквенные слова\n","\n","tokenizer.fit_on_texts(xTrainTProf) # \"скармливаем\" наши тексты, т.е даём в обработку методу, который соберет словарь частотности\n","items = list(tokenizer.word_index.items())  #Вытаскиваем индексы слов для просмотра"],"metadata":{"id":"t2KIP2DtC34l","executionInfo":{"status":"ok","timestamp":1665996634784,"user_tz":-180,"elapsed":1197,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Преобразовываем текст в последовательность индексов согласно частотному словарю\n","xTrainProfIndexes = tokenizer.texts_to_sequences(xTrainTProf) #обучающие тесты в индексы"],"metadata":{"id":"58ZRuu-4FJE9","executionInfo":{"status":"ok","timestamp":1665996638225,"user_tz":-180,"elapsed":1245,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Преобразовываем полученные выборки из последовательности индексов в матрицы нулей и единиц по принципу Bag of Words\n","xTrainProf01 = tokenizer.sequences_to_matrix(xTrainProfIndexes) # Подаем xTrain в виде списка чтобы метод успешно сработал\n","print(xTrainProf01.shape) # Размер обучающей выборки, сформированной по Bag of Words\n","print(xTrainProf01[0][0:100]) # Пример данных"],"metadata":{"id":"wMBdinnpFQfi","executionInfo":{"status":"ok","timestamp":1665996642964,"user_tz":-180,"elapsed":3145,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5434894f-04b6-4bf1-d3e9-2ef8b053b7bf"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["(62967, 10000)\n","[0. 0. 1. 0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0.]\n"]}]},{"cell_type":"code","source":["n = 0\n","print(xTrainTProf[n])       # Профессия\n","print(xTrainProfIndexes[n]) # Профессия через индексы"],"metadata":{"id":"T2uH79ZvFd38","executionInfo":{"status":"ok","timestamp":1665996645551,"user_tz":-180,"elapsed":1047,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3d567d55-e1db-4e57-fb7a-83d973955d33"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Специалист по поддержке чата(support team) домашний агент ООО \"Гольфстрим\"\n","[4, 5, 219, 2300, 402, 139, 2976, 2006, 2, 1613]\n"]}]},{"cell_type":"code","source":["xTrainProf01.shape"],"metadata":{"id":"Zo3baA4vFfa0","executionInfo":{"status":"ok","timestamp":1665996753285,"user_tz":-180,"elapsed":709,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"49b93988-a2ee-48a4-fdaf-ad748f6fa724"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(62967, 10000)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Нейросеть для простых текстовых данных\n","modelTProf = Sequential()\n","modelTProf.add(Dense(20, activation='relu', input_dim=(xTrainProf01.shape[1]) ) )\n","modelTProf.add(Dense(500, activation='relu'))\n","modelTProf.add(Dense(1, activation='linear'))\n","\n","modelTProf.compile(optimizer=Adagrad(learning_rate=1e-3), loss='mse', metrics=['mae'])\n","\n","history = modelTProf.fit(xTrainProf01[:50000], \n","                    yTrain[:50000], \n","                    batch_size=20,\n","                    epochs=50, \n","                    #validation_split=0.1, \n","                    validation_data=(xTrainProf01[50000:], yTrain[50000:]),\n","                    verbose=1, shuffle=True)\n","\n","plt.plot(history.history['mae'], \n","         label='Средняя абсолютная ошибка на обучающем наборе')\n","plt.plot(history.history['val_mae'], \n","         label='Средняя абсолютная ошибка на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Средняя абсолютная ошибка')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"qHe7o9riFmzU","executionInfo":{"status":"ok","timestamp":1665997202689,"user_tz":-180,"elapsed":446376,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"adb121e3-b4f8-4cef-d11a-20a117e5edb3"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","2500/2500 [==============================] - 9s 3ms/step - loss: 21132.6523 - mae: 57.6502 - val_loss: 4967.4458 - val_mae: 42.2842\n","Epoch 2/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 18032.7148 - mae: 40.4713 - val_loss: 3863.6790 - val_mae: 39.8736\n","Epoch 3/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 17518.3457 - mae: 39.7796 - val_loss: 3564.5376 - val_mae: 38.9667\n","Epoch 4/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 17283.4062 - mae: 38.8200 - val_loss: 3379.8591 - val_mae: 37.9638\n","Epoch 5/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 17119.4785 - mae: 37.9201 - val_loss: 3243.8372 - val_mae: 37.1575\n","Epoch 6/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16993.3711 - mae: 37.1024 - val_loss: 3137.5454 - val_mae: 36.5326\n","Epoch 7/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16892.1602 - mae: 36.4503 - val_loss: 3051.4736 - val_mae: 36.0201\n","Epoch 8/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16808.9043 - mae: 35.9329 - val_loss: 2981.2397 - val_mae: 35.5761\n","Epoch 9/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16739.1855 - mae: 35.4866 - val_loss: 2922.6057 - val_mae: 35.1851\n","Epoch 10/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16679.8418 - mae: 35.1021 - val_loss: 2873.0754 - val_mae: 34.8480\n","Epoch 11/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16628.5098 - mae: 34.6927 - val_loss: 2829.5273 - val_mae: 34.6018\n","Epoch 12/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16583.3750 - mae: 34.4061 - val_loss: 2791.5049 - val_mae: 34.3759\n","Epoch 13/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16543.4316 - mae: 34.2202 - val_loss: 2758.6399 - val_mae: 34.1399\n","Epoch 14/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16507.8379 - mae: 33.9143 - val_loss: 2728.8020 - val_mae: 33.9722\n","Epoch 15/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16475.5977 - mae: 33.6983 - val_loss: 2701.8669 - val_mae: 33.8246\n","Epoch 16/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16446.2832 - mae: 33.5222 - val_loss: 2677.4878 - val_mae: 33.6872\n","Epoch 17/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16419.4121 - mae: 33.3595 - val_loss: 2655.2986 - val_mae: 33.5582\n","Epoch 18/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16394.6758 - mae: 33.1812 - val_loss: 2634.7617 - val_mae: 33.4502\n","Epoch 19/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16371.8057 - mae: 33.0646 - val_loss: 2616.0059 - val_mae: 33.3368\n","Epoch 20/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16350.5625 - mae: 32.9166 - val_loss: 2598.5149 - val_mae: 33.2363\n","Epoch 21/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16330.6289 - mae: 32.8065 - val_loss: 2582.2778 - val_mae: 33.1350\n","Epoch 22/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16312.0078 - mae: 32.6891 - val_loss: 2567.0879 - val_mae: 33.0411\n","Epoch 23/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16294.4463 - mae: 32.5913 - val_loss: 2552.9177 - val_mae: 32.9477\n","Epoch 24/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16277.9404 - mae: 32.4533 - val_loss: 2539.3870 - val_mae: 32.8752\n","Epoch 25/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16262.2402 - mae: 32.3513 - val_loss: 2526.6133 - val_mae: 32.8073\n","Epoch 26/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16247.3896 - mae: 32.2842 - val_loss: 2514.6379 - val_mae: 32.7324\n","Epoch 27/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16233.2324 - mae: 32.1857 - val_loss: 2503.2454 - val_mae: 32.6644\n","Epoch 28/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16219.7529 - mae: 32.0790 - val_loss: 2492.3120 - val_mae: 32.6093\n","Epoch 29/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16206.8418 - mae: 31.9994 - val_loss: 2481.9165 - val_mae: 32.5568\n","Epoch 30/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16194.5264 - mae: 31.9596 - val_loss: 2472.1416 - val_mae: 32.4925\n","Epoch 31/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16182.7314 - mae: 31.8538 - val_loss: 2462.7078 - val_mae: 32.4434\n","Epoch 32/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16171.3857 - mae: 31.7960 - val_loss: 2453.7163 - val_mae: 32.3915\n","Epoch 33/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16160.4971 - mae: 31.7108 - val_loss: 2445.0654 - val_mae: 32.3474\n","Epoch 34/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16150.0273 - mae: 31.6843 - val_loss: 2436.9050 - val_mae: 32.2923\n","Epoch 35/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16139.9795 - mae: 31.6047 - val_loss: 2429.0269 - val_mae: 32.2435\n","Epoch 36/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16130.2549 - mae: 31.5280 - val_loss: 2421.4224 - val_mae: 32.2010\n","Epoch 37/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16120.8574 - mae: 31.4757 - val_loss: 2414.1245 - val_mae: 32.1581\n","Epoch 38/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16111.8115 - mae: 31.4247 - val_loss: 2407.1145 - val_mae: 32.1147\n","Epoch 39/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16103.0811 - mae: 31.3470 - val_loss: 2400.3057 - val_mae: 32.0789\n","Epoch 40/50\n","2500/2500 [==============================] - 9s 4ms/step - loss: 16094.5791 - mae: 31.2917 - val_loss: 2393.7422 - val_mae: 32.0442\n","Epoch 41/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16086.3223 - mae: 31.2601 - val_loss: 2387.4617 - val_mae: 32.0042\n","Epoch 42/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16078.3633 - mae: 31.2042 - val_loss: 2381.3833 - val_mae: 31.9671\n","Epoch 43/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16070.6396 - mae: 31.1396 - val_loss: 2375.4744 - val_mae: 31.9353\n","Epoch 44/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16063.1152 - mae: 31.1101 - val_loss: 2369.8042 - val_mae: 31.8992\n","Epoch 45/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16055.8223 - mae: 31.0445 - val_loss: 2364.2827 - val_mae: 31.8698\n","Epoch 46/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16048.7256 - mae: 31.0153 - val_loss: 2358.9609 - val_mae: 31.8363\n","Epoch 47/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16041.7949 - mae: 30.9704 - val_loss: 2353.8135 - val_mae: 31.8041\n","Epoch 48/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16035.0840 - mae: 30.9142 - val_loss: 2348.7917 - val_mae: 31.7763\n","Epoch 49/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16028.5264 - mae: 30.8934 - val_loss: 2343.9692 - val_mae: 31.7427\n","Epoch 50/50\n","2500/2500 [==============================] - 8s 3ms/step - loss: 16022.1553 - mae: 30.8317 - val_loss: 2339.2476 - val_mae: 31.7154\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# xTrainProf01"],"metadata":{"id":"xD8c1CEcLCx1","executionInfo":{"status":"ok","timestamp":1665997232606,"user_tz":-180,"elapsed":431,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["del xTrainProf01 # Удаляем переменную для экономии места"],"metadata":{"id":"BDKdKJRWF4aX","executionInfo":{"status":"ok","timestamp":1665997235938,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["# Нейросеть на базе усложненных текстовых данных"],"metadata":{"id":"9Bhy9zq1GAJ7"}},{"cell_type":"code","source":["# Загружаем данные по резюме\n","def getXTrainTRez(values):\n","  xTrainTRez = []\n","  \n","  for val in values:\n","    currText = \"\"\n","    if (type(val[6]) != float):\n","      currText += val[6]\n","    \n","    if (getParameterSalary(val[1]) != -1):\n","      xTrainTRez.append(currText)\n","  \n","  xTrainTRez = np.array(xTrainTRez)\n","  \n","  return xTrainTRez"],"metadata":{"id":"luzhAQ8KGH44","executionInfo":{"status":"ok","timestamp":1666000986176,"user_tz":-180,"elapsed":17,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# ТУТ НАЧИНАЕТ НЕ ХВАТАТЬ ОЗУ\n","# Нужно подгрузить часть предыдущих ячеек\n","# Те, что с чисткой и загрузкой датафрейма\n","# Также ячейка с инициализацией функций."],"metadata":{"id":"BSBEWmO_LMZm","executionInfo":{"status":"ok","timestamp":1665998430695,"user_tz":-180,"elapsed":808,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Получаем резюме для выборки\n","xTrainTRez = getXTrainTRez(hh_df.values[:40000])"],"metadata":{"id":"qFijG0a9GMiT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(xTrainTRez[10]) # Пример 11го резюме"],"metadata":{"id":"HdkhBs3VGQe4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Преобазуем тестовые данные\n","\n","maxWordsCount = 4000 # определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","\n","#для этого воспользуемся встроенной в Keras функцией Tokenizer для разбиения текста и превращения в матрицу числовых значений\n","tokenizer = Tokenizer(num_words=maxWordsCount, filters='!\"#$%&()*+,-–—./:;<=>?@[\\\\]^_`{|}~\\t\\n\\xa0', lower=True, split=' ', oov_token='unknown', char_level=False)\n","\n","tokenizer.fit_on_texts(xTrainTRez)         # собираем словарь частотности\n","#items = list(tokenizer.word_index.items()) # Выбираем индексы слов для просмотра"],"metadata":{"id":"JHrWl1vjGWC4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Преобразовываем текст в последовательность индексов согласно частотному словарю\n","xTrainRezIndexes = tokenizer.texts_to_sequences(xTrainTRez) # Обучающие тесты в индексы"],"metadata":{"id":"F7Mysxk6GdnI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Подготавливаем данные\n","xTrainRez01 = tokenizer.sequences_to_matrix(xTrainRezIndexes) # Подаем xTrain в виде списка чтобы метод успешно сработал\n","print(xTrainRez01.shape)                                      # Размер обучающей выборки, сформированной по Bag of Words\n","print(xTrainRez01[0][0:100])  "],"metadata":{"id":"JXaW31pSGjmq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(xTrainRez01.shape) # Размер выборки самых частых слов\n","print(xTrainRez01[553])  # Пример из отформатированной выборки"],"metadata":{"id":"V3-nqC5cG1yb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(_, yTrain) = get01Data(hh_df.values)"],"metadata":{"id":"c187uSnnRRaM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Нейросеть для обучения\n","modelTRez = Sequential()\n","modelTRez.add(Dense(20, activation='relu',input_dim=(xTrainRez01.shape[1])))\n","modelTRez.add(Dense(500, activation='relu'))\n","modelTRez.add(Dropout(0.3))\n","modelTRez.add(Dense(1, activation='linear'))\n"," \n","modelTRez.compile(optimizer=Adam(learning_rate=1e-3), loss='mse', metrics=['mae'])\n"," \n","history = modelTRez.fit(xTrainRez01[:35000], \n","                    yTrain[:35000], \n","                    batch_size=20,\n","                    epochs=20, \n","                    validation_data=(xTrainRez01[35000:], yTrain[35000:]),\n","                    verbose=1, shuffle=True)\n"," \n","plt.plot(history.history['mae'], \n","         label='Средняя абсолютная ошибка на обучающем наборе')\n","plt.plot(history.history['val_mae'], \n","         label='Средняя абсолютная ошибка на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Средняя абсолютная ошибка')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"zmRA1zdBG7lV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Нейросеть на базе числовых и текстовых данных"],"metadata":{"id":"1sT8c5PINOky"}},{"cell_type":"code","source":["# Нейросеть в стиле функционального программирования\n","\n","input1 = Input((xTrain01.shape[1],))\n","#input2 = Input((xTrainProf01.shape[1],))\n","input3 = Input((xTrainRez01.shape[1],))\n","\n","x1 = BatchNormalization()(input1) # Создаем ветку х1\n","x1 = Dropout(0.5)(x1)\n","x1 = Dense(10, activation=\"relu\")(x1)\n","x1 = Dense(1000, activation=\"relu\")(x1)\n","x1 = Dense(100, activation = \"relu\")(x1)\n","\n","#x2 = BatchNormalization()(input2) # Создаем ветку х2\n","#x2 = Dense(25, activation=\"relu\")(input2)\n","#x2 = Dense(8, activation=\"tanh\")(x2)\n","#x2 = Dense(5, activation = \"elu\")(x2)\n","\n","#x3 = BatchNormalization()(input3) # Создаем ветку х3\n","x3 = Dense(1000, activation=\"tanh\")(input3)\n","x3 = Dense(20, activation = \"elu\")(x3)\n","x3 = Dense(5, activation = \"elu\")(x3)\n","\n","x = concatenate([x1, x3]) # Объединяем все три ветки\n","\n","x = Dense(15, activation='linear')(x)\n","x = Dropout(0.5)(x)\n","x = Dense(1, activation='relu')(x) # Финальный нейрон, делает регрессию\n","\n","model = Model((input1, input3), x) # В Model загружаем стартовые и последнюю точки \n","\n","model.compile(optimizer=Adam(learning_rate=1e-3), loss='mse', metrics=['mae'])\n","\n","history = model.fit([xTrain01[:35000], xTrainRez01[:35000]], \n","                    yTrain[:35000], \n","                    epochs= 80, \n","                    validation_data=([xTrain01[35000:], xTrainRez01[35000:]], \n","                    yTrain[35000:]), \n","                    verbose=1, shuffle=True)"],"metadata":{"id":"CzlR7V1xHKv0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(history.history['mae'], \n","         label='Средняя абсолютная ошибка на обучающем наборе')\n","plt.plot(history.history['val_mae'], \n","         label='Средняя абсолютная ошибка на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Средняя абсолютная ошибка')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"RfA80uGJHTen"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yy = yTrain[35000:] # Зарплата\n","pred = model.predict([xTrain01[35000:], xTrainRez01[35000:]]) # Предсказанная зарплата\n","plt.scatter(yy, pred)\n","plt.xlabel('Правильные значение')\n","plt.ylabel('Предсказания')\n","plt.axis('equal')\n","plt.xlim(plt.xlim())\n","plt.ylim(plt.ylim())\n","plt.plot([-1000, 1000], [-1000, 1000])\n","plt.show()"],"metadata":{"id":"dOxYidciHZGy"},"execution_count":null,"outputs":[]}]}