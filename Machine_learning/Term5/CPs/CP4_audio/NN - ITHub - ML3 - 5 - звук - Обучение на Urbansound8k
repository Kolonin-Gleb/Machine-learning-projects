{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"RRuD6H9aYIjm","executionInfo":{"status":"ok","timestamp":1670855209319,"user_tz":-180,"elapsed":8589,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"outputs":[],"source":["from tensorflow.keras.utils import to_categorical # Функция для представления в формате one_hot_encoding\n","from tensorflow.keras import utils # Для получения изображения структуры НС\n","\n","import os # Работа с папками и файлами\n","import librosa # Параметризация аудио\n","import numpy as np\n","import time # модуль time для подсчёта времени\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.optimizers import Adam, RMSprop\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import concatenate, Input, Dense, MaxPooling2D, Dropout, BatchNormalization, Flatten, Conv1D, Conv2D, LSTM\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37015,"status":"ok","timestamp":1670855246324,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"},"user_tz":-180},"id":"FGAKU_zWY6_w","outputId":"7d07e5dc-8831-425e-8a5b-1765cc46fab5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import files # Загрузка файлов\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"EuD6E7CmVH2N"},"source":["# Загрузка выборок"]},{"cell_type":"code","source":["sounds_by_classes_test = {'air_conditioner': [['fold5/100852-0-0-0.wav', 0], ['fold5/100852-0-0-1.wav', 0], ['fold5/100852-0-0-10.wav', 0]], 'children_playing': [['fold5/100263-2-0-117.wav', 2], ['fold5/100263-2-0-121.wav', 2], ['fold5/100263-2-0-126.wav', 2]], 'dog_bark': [['fold5/100032-3-0-0.wav', 3], ['fold2/100652-3-0-0.wav', 3], ['fold2/100652-3-0-1.wav', 3]], 'drilling': [['fold3/103199-4-0-0.wav', 4], ['fold3/103199-4-0-3.wav', 4], ['fold3/103199-4-0-4.wav', 4]], 'engine_idling': [['fold10/102857-5-0-0.wav', 5], ['fold10/102857-5-0-1.wav', 5], ['fold10/102857-5-0-10.wav', 5]], 'jackhammer': [['fold1/103074-7-0-0.wav', 7], ['fold1/103074-7-0-1.wav', 7], ['fold1/103074-7-0-2.wav', 7]], 'street_music': [['fold7/101848-9-0-0.wav', 9], ['fold7/101848-9-0-1.wav', 9], ['fold7/101848-9-0-2.wav', 9]], 'siren': [['fold7/102853-8-0-0.wav', 8], ['fold7/102853-8-0-1.wav', 8], ['fold7/102853-8-0-2.wav', 8]], 'car_horn': [['fold10/100648-1-0-0.wav', 1], ['fold10/100648-1-1-0.wav', 1], ['fold10/100648-1-2-0.wav', 1]], 'gun_shot': [['fold1/102305-6-0-0.wav', 6], ['fold9/106955-6-0-0.wav', 6], ['fold3/110622-6-0-0.wav', 6]]}"],"metadata":{"id":"ElP4tc2-u9kY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vHSjImZIbrnd"},"source":["## Формирование обучающей выборки"]},{"cell_type":"code","source":["# Загрузка numpy файлов сформированной основной выборки\n","xTrain = np.load('/content/xTrain.npy') # , allow_pickle=True\n","yTrain = np.load('/content/yTrain.npy')\n","\n","# Выводим размерности обучающей и проверочной выборки\n","print(xTrain.shape)\n","print(yTrain.shape)"],"metadata":{"id":"lzpoX75MTi6f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Разделение на обучающую и проверочную\n","# Разделяем выборку на обучающую и проверочную. На проверочную отдаем 10%\n","xTrain, xVal, yTrain, yVal = train_test_split(xTrain, yTrain, test_size=0.1)\n","\n","xVal = np.array(xVal)\n","yVal = np.array(yVal)"],"metadata":{"id":"z0r3lKXduPcF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Выводим размерности обучающей и проверочной выборки\n","print(xTrain.shape)\n","print(yTrain.shape)\n","print(xVal.shape)\n","print(yVal.shape)"],"metadata":{"id":"Fx9KBJ_8uPNL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Посмотрим хранящиеся данные\n","xTrain[0]"],"metadata":{"id":"2zrO20ykuWln"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iYu092zqhCY5"},"source":["## Полносвязная нейросеть для классификации"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":202910,"status":"ok","timestamp":1669643950578,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"},"user_tz":-180},"id":"NedkS59UgnLa","outputId":"4861e27d-6a08-4875-e0b7-568a046d7b58"},"outputs":[{"name":"stdout","output_type":"stream","text":["Количество аудио-параметров: 37\n","Количество жанров: 10\n","Epoch 1/200\n","225/225 [==============================] - 1s 4ms/step - loss: 2.2829 - accuracy: 0.1587 - val_loss: 2.1435 - val_accuracy: 0.2680\n","Epoch 2/200\n","225/225 [==============================] - 1s 3ms/step - loss: 2.0249 - accuracy: 0.3089 - val_loss: 1.9324 - val_accuracy: 0.3280\n","Epoch 3/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.8673 - accuracy: 0.3593 - val_loss: 1.8029 - val_accuracy: 0.3600\n","Epoch 4/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.7670 - accuracy: 0.3758 - val_loss: 1.7156 - val_accuracy: 0.3780\n","Epoch 5/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.6963 - accuracy: 0.3924 - val_loss: 1.6511 - val_accuracy: 0.3980\n","Epoch 6/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.6419 - accuracy: 0.4098 - val_loss: 1.6013 - val_accuracy: 0.4260\n","Epoch 7/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.5979 - accuracy: 0.4249 - val_loss: 1.5601 - val_accuracy: 0.4360\n","Epoch 8/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.5610 - accuracy: 0.4409 - val_loss: 1.5272 - val_accuracy: 0.4440\n","Epoch 9/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.5292 - accuracy: 0.4513 - val_loss: 1.4983 - val_accuracy: 0.4600\n","Epoch 10/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.5013 - accuracy: 0.4653 - val_loss: 1.4736 - val_accuracy: 0.4800\n","Epoch 11/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.4760 - accuracy: 0.4800 - val_loss: 1.4519 - val_accuracy: 0.4900\n","Epoch 12/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.4530 - accuracy: 0.4913 - val_loss: 1.4321 - val_accuracy: 0.5040\n","Epoch 13/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.4319 - accuracy: 0.5002 - val_loss: 1.4132 - val_accuracy: 0.5200\n","Epoch 14/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.4124 - accuracy: 0.5120 - val_loss: 1.3970 - val_accuracy: 0.5280\n","Epoch 15/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3942 - accuracy: 0.5218 - val_loss: 1.3827 - val_accuracy: 0.5320\n","Epoch 16/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3773 - accuracy: 0.5278 - val_loss: 1.3671 - val_accuracy: 0.5480\n","Epoch 17/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3615 - accuracy: 0.5378 - val_loss: 1.3550 - val_accuracy: 0.5440\n","Epoch 18/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3465 - accuracy: 0.5438 - val_loss: 1.3427 - val_accuracy: 0.5480\n","Epoch 19/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3322 - accuracy: 0.5513 - val_loss: 1.3315 - val_accuracy: 0.5580\n","Epoch 20/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3187 - accuracy: 0.5558 - val_loss: 1.3209 - val_accuracy: 0.5580\n","Epoch 21/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.3059 - accuracy: 0.5633 - val_loss: 1.3114 - val_accuracy: 0.5600\n","Epoch 22/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2936 - accuracy: 0.5669 - val_loss: 1.3035 - val_accuracy: 0.5580\n","Epoch 23/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2819 - accuracy: 0.5709 - val_loss: 1.2938 - val_accuracy: 0.5620\n","Epoch 24/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2708 - accuracy: 0.5778 - val_loss: 1.2851 - val_accuracy: 0.5620\n","Epoch 25/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2601 - accuracy: 0.5804 - val_loss: 1.2762 - val_accuracy: 0.5660\n","Epoch 26/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2498 - accuracy: 0.5813 - val_loss: 1.2694 - val_accuracy: 0.5620\n","Epoch 27/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2400 - accuracy: 0.5878 - val_loss: 1.2627 - val_accuracy: 0.5640\n","Epoch 28/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2304 - accuracy: 0.5902 - val_loss: 1.2553 - val_accuracy: 0.5700\n","Epoch 29/200\n","225/225 [==============================] - 1s 4ms/step - loss: 1.2211 - accuracy: 0.5964 - val_loss: 1.2501 - val_accuracy: 0.5680\n","Epoch 30/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2122 - accuracy: 0.5971 - val_loss: 1.2418 - val_accuracy: 0.5700\n","Epoch 31/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.2037 - accuracy: 0.6018 - val_loss: 1.2371 - val_accuracy: 0.5740\n","Epoch 32/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1953 - accuracy: 0.6062 - val_loss: 1.2323 - val_accuracy: 0.5760\n","Epoch 33/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1872 - accuracy: 0.6078 - val_loss: 1.2272 - val_accuracy: 0.5780\n","Epoch 34/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1794 - accuracy: 0.6093 - val_loss: 1.2205 - val_accuracy: 0.5800\n","Epoch 35/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1717 - accuracy: 0.6116 - val_loss: 1.2173 - val_accuracy: 0.5800\n","Epoch 36/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1645 - accuracy: 0.6142 - val_loss: 1.2124 - val_accuracy: 0.5820\n","Epoch 37/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1573 - accuracy: 0.6180 - val_loss: 1.2079 - val_accuracy: 0.5780\n","Epoch 38/200\n","225/225 [==============================] - 1s 4ms/step - loss: 1.1503 - accuracy: 0.6207 - val_loss: 1.2027 - val_accuracy: 0.5860\n","Epoch 39/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1435 - accuracy: 0.6222 - val_loss: 1.1988 - val_accuracy: 0.5840\n","Epoch 40/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1369 - accuracy: 0.6244 - val_loss: 1.1939 - val_accuracy: 0.5880\n","Epoch 41/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1304 - accuracy: 0.6273 - val_loss: 1.1921 - val_accuracy: 0.6000\n","Epoch 42/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1240 - accuracy: 0.6307 - val_loss: 1.1876 - val_accuracy: 0.6000\n","Epoch 43/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1180 - accuracy: 0.6291 - val_loss: 1.1829 - val_accuracy: 0.5960\n","Epoch 44/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1122 - accuracy: 0.6316 - val_loss: 1.1799 - val_accuracy: 0.6040\n","Epoch 45/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1062 - accuracy: 0.6349 - val_loss: 1.1764 - val_accuracy: 0.6080\n","Epoch 46/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.1005 - accuracy: 0.6389 - val_loss: 1.1746 - val_accuracy: 0.6080\n","Epoch 47/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0951 - accuracy: 0.6398 - val_loss: 1.1710 - val_accuracy: 0.6060\n","Epoch 48/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0895 - accuracy: 0.6409 - val_loss: 1.1674 - val_accuracy: 0.6060\n","Epoch 49/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0842 - accuracy: 0.6413 - val_loss: 1.1649 - val_accuracy: 0.6120\n","Epoch 50/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0789 - accuracy: 0.6429 - val_loss: 1.1629 - val_accuracy: 0.6100\n","Epoch 51/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0739 - accuracy: 0.6464 - val_loss: 1.1595 - val_accuracy: 0.6120\n","Epoch 52/200\n","225/225 [==============================] - 1s 4ms/step - loss: 1.0688 - accuracy: 0.6487 - val_loss: 1.1572 - val_accuracy: 0.6160\n","Epoch 53/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0641 - accuracy: 0.6496 - val_loss: 1.1542 - val_accuracy: 0.6160\n","Epoch 54/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0592 - accuracy: 0.6516 - val_loss: 1.1503 - val_accuracy: 0.6100\n","Epoch 55/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0546 - accuracy: 0.6551 - val_loss: 1.1482 - val_accuracy: 0.6120\n","Epoch 56/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0499 - accuracy: 0.6564 - val_loss: 1.1473 - val_accuracy: 0.6140\n","Epoch 57/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0454 - accuracy: 0.6542 - val_loss: 1.1439 - val_accuracy: 0.6120\n","Epoch 58/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0409 - accuracy: 0.6556 - val_loss: 1.1396 - val_accuracy: 0.6100\n","Epoch 59/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0367 - accuracy: 0.6607 - val_loss: 1.1389 - val_accuracy: 0.6060\n","Epoch 60/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0322 - accuracy: 0.6640 - val_loss: 1.1385 - val_accuracy: 0.6080\n","Epoch 61/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0282 - accuracy: 0.6618 - val_loss: 1.1350 - val_accuracy: 0.6040\n","Epoch 62/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0239 - accuracy: 0.6638 - val_loss: 1.1329 - val_accuracy: 0.6040\n","Epoch 63/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0200 - accuracy: 0.6673 - val_loss: 1.1316 - val_accuracy: 0.5960\n","Epoch 64/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0159 - accuracy: 0.6669 - val_loss: 1.1291 - val_accuracy: 0.5980\n","Epoch 65/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0120 - accuracy: 0.6678 - val_loss: 1.1256 - val_accuracy: 0.5980\n","Epoch 66/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0081 - accuracy: 0.6722 - val_loss: 1.1249 - val_accuracy: 0.5980\n","Epoch 67/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0043 - accuracy: 0.6733 - val_loss: 1.1235 - val_accuracy: 0.6020\n","Epoch 68/200\n","225/225 [==============================] - 1s 3ms/step - loss: 1.0006 - accuracy: 0.6751 - val_loss: 1.1209 - val_accuracy: 0.6040\n","Epoch 69/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9968 - accuracy: 0.6738 - val_loss: 1.1199 - val_accuracy: 0.6040\n","Epoch 70/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9932 - accuracy: 0.6753 - val_loss: 1.1175 - val_accuracy: 0.6020\n","Epoch 71/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9896 - accuracy: 0.6771 - val_loss: 1.1170 - val_accuracy: 0.6040\n","Epoch 72/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9861 - accuracy: 0.6793 - val_loss: 1.1152 - val_accuracy: 0.6080\n","Epoch 73/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9825 - accuracy: 0.6780 - val_loss: 1.1139 - val_accuracy: 0.6080\n","Epoch 74/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9791 - accuracy: 0.6807 - val_loss: 1.1145 - val_accuracy: 0.6120\n","Epoch 75/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9758 - accuracy: 0.6787 - val_loss: 1.1120 - val_accuracy: 0.6100\n","Epoch 76/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9724 - accuracy: 0.6833 - val_loss: 1.1113 - val_accuracy: 0.6120\n","Epoch 77/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9691 - accuracy: 0.6840 - val_loss: 1.1084 - val_accuracy: 0.6120\n","Epoch 78/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9658 - accuracy: 0.6842 - val_loss: 1.1087 - val_accuracy: 0.6120\n","Epoch 79/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9626 - accuracy: 0.6829 - val_loss: 1.1063 - val_accuracy: 0.6080\n","Epoch 80/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9593 - accuracy: 0.6856 - val_loss: 1.1036 - val_accuracy: 0.6100\n","Epoch 81/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9564 - accuracy: 0.6873 - val_loss: 1.1033 - val_accuracy: 0.6100\n","Epoch 82/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9530 - accuracy: 0.6913 - val_loss: 1.1044 - val_accuracy: 0.6100\n","Epoch 83/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9500 - accuracy: 0.6880 - val_loss: 1.1027 - val_accuracy: 0.6100\n","Epoch 84/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9471 - accuracy: 0.6911 - val_loss: 1.1012 - val_accuracy: 0.6100\n","Epoch 85/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.9440 - accuracy: 0.6902 - val_loss: 1.0977 - val_accuracy: 0.6140\n","Epoch 86/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9410 - accuracy: 0.6938 - val_loss: 1.0982 - val_accuracy: 0.6120\n","Epoch 87/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9380 - accuracy: 0.6942 - val_loss: 1.0978 - val_accuracy: 0.6160\n","Epoch 88/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9352 - accuracy: 0.6956 - val_loss: 1.0959 - val_accuracy: 0.6160\n","Epoch 89/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9322 - accuracy: 0.6958 - val_loss: 1.0930 - val_accuracy: 0.6180\n","Epoch 90/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9294 - accuracy: 0.6973 - val_loss: 1.0932 - val_accuracy: 0.6200\n","Epoch 91/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9266 - accuracy: 0.6998 - val_loss: 1.0940 - val_accuracy: 0.6180\n","Epoch 92/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9239 - accuracy: 0.6962 - val_loss: 1.0923 - val_accuracy: 0.6200\n","Epoch 93/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9210 - accuracy: 0.6987 - val_loss: 1.0916 - val_accuracy: 0.6220\n","Epoch 94/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9185 - accuracy: 0.6989 - val_loss: 1.0900 - val_accuracy: 0.6240\n","Epoch 95/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9155 - accuracy: 0.6991 - val_loss: 1.0888 - val_accuracy: 0.6240\n","Epoch 96/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9129 - accuracy: 0.6996 - val_loss: 1.0893 - val_accuracy: 0.6240\n","Epoch 97/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9104 - accuracy: 0.7013 - val_loss: 1.0881 - val_accuracy: 0.6260\n","Epoch 98/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9077 - accuracy: 0.7027 - val_loss: 1.0859 - val_accuracy: 0.6260\n","Epoch 99/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9051 - accuracy: 0.7029 - val_loss: 1.0860 - val_accuracy: 0.6280\n","Epoch 100/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.9025 - accuracy: 0.7056 - val_loss: 1.0848 - val_accuracy: 0.6280\n","Epoch 101/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8999 - accuracy: 0.7040 - val_loss: 1.0863 - val_accuracy: 0.6240\n","Epoch 102/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8974 - accuracy: 0.7049 - val_loss: 1.0847 - val_accuracy: 0.6260\n","Epoch 103/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8948 - accuracy: 0.7071 - val_loss: 1.0824 - val_accuracy: 0.6260\n","Epoch 104/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8924 - accuracy: 0.7058 - val_loss: 1.0809 - val_accuracy: 0.6280\n","Epoch 105/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8898 - accuracy: 0.7062 - val_loss: 1.0791 - val_accuracy: 0.6320\n","Epoch 106/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8875 - accuracy: 0.7080 - val_loss: 1.0796 - val_accuracy: 0.6280\n","Epoch 107/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8850 - accuracy: 0.7076 - val_loss: 1.0799 - val_accuracy: 0.6280\n","Epoch 108/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8826 - accuracy: 0.7082 - val_loss: 1.0794 - val_accuracy: 0.6280\n","Epoch 109/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8801 - accuracy: 0.7087 - val_loss: 1.0807 - val_accuracy: 0.6220\n","Epoch 110/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8777 - accuracy: 0.7093 - val_loss: 1.0796 - val_accuracy: 0.6240\n","Epoch 111/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8753 - accuracy: 0.7113 - val_loss: 1.0780 - val_accuracy: 0.6280\n","Epoch 112/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8730 - accuracy: 0.7107 - val_loss: 1.0773 - val_accuracy: 0.6280\n","Epoch 113/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8707 - accuracy: 0.7120 - val_loss: 1.0769 - val_accuracy: 0.6320\n","Epoch 114/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8684 - accuracy: 0.7111 - val_loss: 1.0757 - val_accuracy: 0.6300\n","Epoch 115/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8660 - accuracy: 0.7133 - val_loss: 1.0754 - val_accuracy: 0.6320\n","Epoch 116/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8637 - accuracy: 0.7124 - val_loss: 1.0745 - val_accuracy: 0.6280\n","Epoch 117/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8614 - accuracy: 0.7133 - val_loss: 1.0755 - val_accuracy: 0.6280\n","Epoch 118/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8593 - accuracy: 0.7142 - val_loss: 1.0758 - val_accuracy: 0.6300\n","Epoch 119/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8570 - accuracy: 0.7140 - val_loss: 1.0738 - val_accuracy: 0.6300\n","Epoch 120/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8548 - accuracy: 0.7151 - val_loss: 1.0731 - val_accuracy: 0.6300\n","Epoch 121/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8524 - accuracy: 0.7156 - val_loss: 1.0744 - val_accuracy: 0.6320\n","Epoch 122/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8503 - accuracy: 0.7162 - val_loss: 1.0738 - val_accuracy: 0.6360\n","Epoch 123/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8481 - accuracy: 0.7180 - val_loss: 1.0719 - val_accuracy: 0.6320\n","Epoch 124/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8459 - accuracy: 0.7189 - val_loss: 1.0715 - val_accuracy: 0.6340\n","Epoch 125/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8437 - accuracy: 0.7189 - val_loss: 1.0687 - val_accuracy: 0.6360\n","Epoch 126/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8415 - accuracy: 0.7193 - val_loss: 1.0703 - val_accuracy: 0.6340\n","Epoch 127/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8394 - accuracy: 0.7204 - val_loss: 1.0714 - val_accuracy: 0.6320\n","Epoch 128/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8372 - accuracy: 0.7204 - val_loss: 1.0711 - val_accuracy: 0.6340\n","Epoch 129/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8351 - accuracy: 0.7236 - val_loss: 1.0714 - val_accuracy: 0.6320\n","Epoch 130/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8330 - accuracy: 0.7229 - val_loss: 1.0695 - val_accuracy: 0.6340\n","Epoch 131/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8309 - accuracy: 0.7242 - val_loss: 1.0690 - val_accuracy: 0.6400\n","Epoch 132/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8288 - accuracy: 0.7249 - val_loss: 1.0697 - val_accuracy: 0.6400\n","Epoch 133/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8268 - accuracy: 0.7251 - val_loss: 1.0691 - val_accuracy: 0.6380\n","Epoch 134/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8246 - accuracy: 0.7273 - val_loss: 1.0691 - val_accuracy: 0.6400\n","Epoch 135/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8226 - accuracy: 0.7269 - val_loss: 1.0671 - val_accuracy: 0.6380\n","Epoch 136/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8206 - accuracy: 0.7271 - val_loss: 1.0674 - val_accuracy: 0.6420\n","Epoch 137/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8186 - accuracy: 0.7302 - val_loss: 1.0672 - val_accuracy: 0.6420\n","Epoch 138/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8165 - accuracy: 0.7293 - val_loss: 1.0682 - val_accuracy: 0.6400\n","Epoch 139/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8144 - accuracy: 0.7300 - val_loss: 1.0688 - val_accuracy: 0.6420\n","Epoch 140/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8125 - accuracy: 0.7316 - val_loss: 1.0650 - val_accuracy: 0.6380\n","Epoch 141/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8105 - accuracy: 0.7316 - val_loss: 1.0644 - val_accuracy: 0.6400\n","Epoch 142/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.8086 - accuracy: 0.7309 - val_loss: 1.0648 - val_accuracy: 0.6380\n","Epoch 143/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8067 - accuracy: 0.7338 - val_loss: 1.0640 - val_accuracy: 0.6380\n","Epoch 144/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8047 - accuracy: 0.7358 - val_loss: 1.0647 - val_accuracy: 0.6380\n","Epoch 145/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8026 - accuracy: 0.7340 - val_loss: 1.0618 - val_accuracy: 0.6420\n","Epoch 146/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.8006 - accuracy: 0.7344 - val_loss: 1.0642 - val_accuracy: 0.6480\n","Epoch 147/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7989 - accuracy: 0.7380 - val_loss: 1.0642 - val_accuracy: 0.6460\n","Epoch 148/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7968 - accuracy: 0.7384 - val_loss: 1.0646 - val_accuracy: 0.6440\n","Epoch 149/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7949 - accuracy: 0.7364 - val_loss: 1.0652 - val_accuracy: 0.6420\n","Epoch 150/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7931 - accuracy: 0.7389 - val_loss: 1.0631 - val_accuracy: 0.6440\n","Epoch 151/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7912 - accuracy: 0.7391 - val_loss: 1.0635 - val_accuracy: 0.6420\n","Epoch 152/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7891 - accuracy: 0.7391 - val_loss: 1.0624 - val_accuracy: 0.6380\n","Epoch 153/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7873 - accuracy: 0.7407 - val_loss: 1.0628 - val_accuracy: 0.6400\n","Epoch 154/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7854 - accuracy: 0.7411 - val_loss: 1.0637 - val_accuracy: 0.6400\n","Epoch 155/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7836 - accuracy: 0.7416 - val_loss: 1.0639 - val_accuracy: 0.6360\n","Epoch 156/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7817 - accuracy: 0.7420 - val_loss: 1.0618 - val_accuracy: 0.6380\n","Epoch 157/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7797 - accuracy: 0.7424 - val_loss: 1.0601 - val_accuracy: 0.6360\n","Epoch 158/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7779 - accuracy: 0.7440 - val_loss: 1.0611 - val_accuracy: 0.6420\n","Epoch 159/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7761 - accuracy: 0.7444 - val_loss: 1.0619 - val_accuracy: 0.6420\n","Epoch 160/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7743 - accuracy: 0.7456 - val_loss: 1.0627 - val_accuracy: 0.6500\n","Epoch 161/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7725 - accuracy: 0.7456 - val_loss: 1.0607 - val_accuracy: 0.6420\n","Epoch 162/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7707 - accuracy: 0.7456 - val_loss: 1.0603 - val_accuracy: 0.6400\n","Epoch 163/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7688 - accuracy: 0.7460 - val_loss: 1.0606 - val_accuracy: 0.6400\n","Epoch 164/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7670 - accuracy: 0.7456 - val_loss: 1.0605 - val_accuracy: 0.6380\n","Epoch 165/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7652 - accuracy: 0.7489 - val_loss: 1.0626 - val_accuracy: 0.6360\n","Epoch 166/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7634 - accuracy: 0.7496 - val_loss: 1.0605 - val_accuracy: 0.6380\n","Epoch 167/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7615 - accuracy: 0.7491 - val_loss: 1.0611 - val_accuracy: 0.6400\n","Epoch 168/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7599 - accuracy: 0.7527 - val_loss: 1.0601 - val_accuracy: 0.6380\n","Epoch 169/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7581 - accuracy: 0.7487 - val_loss: 1.0614 - val_accuracy: 0.6400\n","Epoch 170/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7562 - accuracy: 0.7493 - val_loss: 1.0625 - val_accuracy: 0.6380\n","Epoch 171/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7546 - accuracy: 0.7533 - val_loss: 1.0610 - val_accuracy: 0.6380\n","Epoch 172/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7529 - accuracy: 0.7524 - val_loss: 1.0616 - val_accuracy: 0.6380\n","Epoch 173/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7511 - accuracy: 0.7522 - val_loss: 1.0598 - val_accuracy: 0.6400\n","Epoch 174/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7493 - accuracy: 0.7522 - val_loss: 1.0616 - val_accuracy: 0.6400\n","Epoch 175/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7475 - accuracy: 0.7556 - val_loss: 1.0599 - val_accuracy: 0.6400\n","Epoch 176/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7457 - accuracy: 0.7533 - val_loss: 1.0588 - val_accuracy: 0.6400\n","Epoch 177/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7441 - accuracy: 0.7544 - val_loss: 1.0590 - val_accuracy: 0.6440\n","Epoch 178/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7422 - accuracy: 0.7560 - val_loss: 1.0623 - val_accuracy: 0.6400\n","Epoch 179/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7406 - accuracy: 0.7553 - val_loss: 1.0600 - val_accuracy: 0.6400\n","Epoch 180/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7389 - accuracy: 0.7553 - val_loss: 1.0571 - val_accuracy: 0.6420\n","Epoch 181/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7372 - accuracy: 0.7582 - val_loss: 1.0585 - val_accuracy: 0.6440\n","Epoch 182/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7354 - accuracy: 0.7567 - val_loss: 1.0609 - val_accuracy: 0.6420\n","Epoch 183/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7338 - accuracy: 0.7576 - val_loss: 1.0604 - val_accuracy: 0.6400\n","Epoch 184/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7321 - accuracy: 0.7578 - val_loss: 1.0597 - val_accuracy: 0.6440\n","Epoch 185/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7304 - accuracy: 0.7598 - val_loss: 1.0606 - val_accuracy: 0.6440\n","Epoch 186/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7286 - accuracy: 0.7596 - val_loss: 1.0599 - val_accuracy: 0.6420\n","Epoch 187/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7268 - accuracy: 0.7607 - val_loss: 1.0623 - val_accuracy: 0.6420\n","Epoch 188/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7253 - accuracy: 0.7604 - val_loss: 1.0585 - val_accuracy: 0.6440\n","Epoch 189/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7237 - accuracy: 0.7620 - val_loss: 1.0591 - val_accuracy: 0.6460\n","Epoch 190/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7220 - accuracy: 0.7624 - val_loss: 1.0584 - val_accuracy: 0.6480\n","Epoch 191/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7203 - accuracy: 0.7638 - val_loss: 1.0606 - val_accuracy: 0.6460\n","Epoch 192/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7187 - accuracy: 0.7649 - val_loss: 1.0605 - val_accuracy: 0.6440\n","Epoch 193/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7170 - accuracy: 0.7644 - val_loss: 1.0580 - val_accuracy: 0.6460\n","Epoch 194/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7154 - accuracy: 0.7653 - val_loss: 1.0608 - val_accuracy: 0.6420\n","Epoch 195/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7136 - accuracy: 0.7680 - val_loss: 1.0619 - val_accuracy: 0.6420\n","Epoch 196/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7122 - accuracy: 0.7667 - val_loss: 1.0619 - val_accuracy: 0.6420\n","Epoch 197/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7106 - accuracy: 0.7678 - val_loss: 1.0590 - val_accuracy: 0.6460\n","Epoch 198/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7089 - accuracy: 0.7698 - val_loss: 1.0596 - val_accuracy: 0.6460\n","Epoch 199/200\n","225/225 [==============================] - 1s 4ms/step - loss: 0.7074 - accuracy: 0.7689 - val_loss: 1.0579 - val_accuracy: 0.6500\n","Epoch 200/200\n","225/225 [==============================] - 1s 3ms/step - loss: 0.7055 - accuracy: 0.7691 - val_loss: 1.0589 - val_accuracy: 0.6440\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Сохраним количество параметров, полученных при анализе аудио-сигнала\n","param_num = xTrain.shape[1]\n","print(\"Количество аудио-параметров:\", param_num)\n","print(\"Количество жанров:\", class_num)\n","\n","model = Sequential()\n","model.add(Dense(256, activation='elu', input_shape=(param_num,)))\n","model.add(Dense(128, activation='elu'))\n","model.add(Dense(64, activation='elu'))\n","model.add(Dense(32, activation='elu'))\n","model.add(Dense(class_num, activation='softmax'))\n","\n","# Компилируем сеть\n","model.compile(optimizer=RMSprop(learning_rate=1e-5),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Обучаем\n","history = model.fit(xTrainS, yTrainS,\n","                    epochs=200,\n","                    batch_size=20,\n","                    validation_data=(xVal, yVal))\n","\n","#Выводим график точности распознавания на обучающей и проверочной выборках\n","plt.plot(history.history[\"accuracy\"])\n","plt.plot(history.history[\"val_accuracy\"])\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"qXV7bubesOSm"},"source":["## Загрузка файла для теста"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":55},"id":"i578aRf8piNN","outputId":"6c225157-df08-4f00-f6a4-7bbb56723e2e"},"outputs":[{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-0b0f3edd-a723-45b7-a502-aba53a6d6ba6\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0b0f3edd-a723-45b7-a502-aba53a6d6ba6\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["from google.colab import files\n","set_files = set(os.listdir())\n","files.upload()\n","set_new_files = set(os.listdir())\n","\n","set_new_files -= set_files\n","\n","print(set_new_files) # Файл, что был загружен"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-i9be11638B0"},"outputs":[],"source":["# Загружаем файл для параметризации\n","y, sr = librosa.load(set_new_files.pop(), mono=True, duration=30)\n","\n","# # Параметризуем сигнал\n","out = get_features(y, sr)\n","\n","# # Приводим в формат, который может принять на вход НС.\n","# # Добавляем размерность, т.к. на вход НС подаётся массив из массивов, что описывают 37 параметров выявленных из каждой композиции.\n","out = np.array(out).reshape(1, len(out))\n","\n","# # Берем ранее подготовленный Scaler и нормализуем\n","out = scaler.transform(out)\n","\n","# # Делаем predict\n","prediction = model_Nikita.predict(out)\n","\n","predict_class = np.argmax(prediction[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iGrafkS84CVN"},"outputs":[],"source":["# Вывод нейронки\n","print(\"Выход сети:\")\n","print(prediction[0])\n","print()\n","for i in range(10):\n","  print(i,\"->\",\"{:.40f}\".format(prediction[0][i]))\n","print()\n","\n","print(\"Номер распознанного жанра: \", predict_class)\n","print(\"Распознанный жанр: \", genres[predict_class])"]}],"metadata":{"colab":{"provenance":[{"file_id":"1hwjQxH8yREe6UsXrzsVOu-qg5ucPn857","timestamp":1669625473618}],"toc_visible":true},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}