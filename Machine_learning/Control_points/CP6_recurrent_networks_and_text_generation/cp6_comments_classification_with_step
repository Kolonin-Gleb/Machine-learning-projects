{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cp6_comments_classification_with_step","provenance":[{"file_id":"1wOnkmUnLr3AfAMfD5cVV7686jgczgiHW","timestamp":1637750380505},{"file_id":"1jl7fk-gwedYl8Cm9ux3o852Y1zx9Wjov","timestamp":1637529012017},{"file_id":"1_uKclltIszcuWmp8H9yI4lE8RLI3Ty_7","timestamp":1636485470308}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"64t_8Ex5Ee2e"},"source":["# Классификация тональности комментариев с помощью LSTM, SimpleRNN"]},{"cell_type":"code","metadata":{"id":"e8O4-nPxEUqJ"},"source":["from google.colab import files # Для работы с файлами \n","import numpy as np # Для работы с данными \n","import matplotlib.pyplot as plt # Для вывода графиков\n","import os # Для работы с файлами\n","%matplotlib inline\n","\n","from tensorflow.keras import utils # Для работы с категориальными данными\n","from tensorflow.keras.models import Sequential # Полносвязная модель\n","from tensorflow.keras.layers import Dense, Dropout, SpatialDropout1D, BatchNormalization, Flatten, Activation, Embedding, SimpleRNN, LSTM # Слои для сети\n","from tensorflow.keras.preprocessing.text import Tokenizer # Методы для работы с текстами\n","from tensorflow.keras.preprocessing.sequence import pad_sequences # Метод для работы с последовательностями\n","\n","from google.colab import drive # Для работы с Google Drive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVh9r519FDRx","executionInfo":{"status":"ok","timestamp":1638212722527,"user_tz":-180,"elapsed":14101,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d9863f31-9aad-419c-ddf8-c936a2eb9cb9"},"source":["drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"gUMbvEO7Fkqb"},"source":["# Удаляем директорию с распакованными данными (если есть)\n","!rm -rf /content/9\\ groups"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gRCeArwCFwgL"},"source":["!unzip -q '/content/drive/MyDrive/Colab Notebooks/Machine_learning/Datasets/PolSentiLex (comments)/edited/9 groups of comments/9 groups.zip' -d /content/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cm6ZwWLrF9V3"},"source":["# Функция для загрузки файла\n","def loadText(fileName):\n","  f = open(fileName, 'r') # Открываем файл в режиме чтения\n","  text = f.read()         # Читаем текст\n","  text = text.replace(\"\\n\", \" \") # Заменяем переносы строк на пробелы\n","  text = text.replace(\"\\r\", \" \") # Заменяем переносы строк на пробелы\n","  text = text.replace(\"\\t\", \" \") # Заменяем табуляции на пробелы\n","  f.close()\n","  \n","  return text\n","\n","labels = [\"Negative\", \"Neutral\", \"Positive\"] # Наши авторы\n","labelsNum = len(labels) # Количество авторов"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EWTXPrHUHRGF","executionInfo":{"status":"ok","timestamp":1638212727965,"user_tz":-180,"elapsed":286,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"4109744b-7082-46b2-e2f7-518a9ce2eaaf"},"source":["# Загружаем тексты из обучающей и тренировочной выборок\n","\n","trainText = [] # Обучающие тексты\n","validationText = [] # Проверочные тексты\n","testText = []  # Тестовые тексты\n","\n","fileList = os.listdir('9 groups') # Получаем список всех файлов\n","print(fileList)\n","for label in labels:\n","  for file in fileList:\n","    if label in file:\n","      if 'train' in file:\n","        trainText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в обучающую выборку')\n","      if 'test' in file:\n","        testText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в тестовую выборку')\n","      if 'validation' in file:\n","        validationText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в проверочную выборку')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Negative train.txt', 'Positive validation.txt', 'Negative validation.txt', 'Positive test.txt', 'Neutral validation.txt', 'Neutral train.txt', 'Positive train.txt', 'Neutral test.txt', 'desktop.ini', 'Negative test.txt']\n","Negative train.txt добавлен в обучающую выборку\n","Negative validation.txt добавлен в проверочную выборку\n","Negative test.txt добавлен в тестовую выборку\n","Neutral validation.txt добавлен в проверочную выборку\n","Neutral train.txt добавлен в обучающую выборку\n","Neutral test.txt добавлен в тестовую выборку\n","Positive validation.txt добавлен в проверочную выборку\n","Positive test.txt добавлен в тестовую выборку\n","Positive train.txt добавлен в обучающую выборку\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrcchnVgJJqN","executionInfo":{"status":"ok","timestamp":1638212730104,"user_tz":-180,"elapsed":236,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d316963f-6e8c-42d1-969c-b4a0eb030598"},"source":["print(\"Количество загруженных тренировочных текстов:\", len(trainText))\n","print(\"Количество загруженных тестовых текстов:\", len(testText))\n","print(\"Количество загруженных проверочных текстов:\", len(validationText))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество загруженных тренировочных текстов: 3\n","Количество загруженных тестовых текстов: 3\n","Количество загруженных проверочных текстов: 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gpRxC6kJ0QI"},"source":["Токенизируем тексты"]},{"cell_type":"code","metadata":{"id":"A7esyuMeJuzV"},"source":["numWords = 20000 # Количество слов/индексов, которое мы будем учитывать при обучении\n","\n","# Tokenizer - встроенная в Keras функция для разбиения текста и превращения\n","# в слов в числовые значения с учётом частотности\n","\n","# num_words - максимальное количество слов/индексов, учитываемое при составлении словаря\n","# filters - список ненужных символов, которые будут удалены из текстов\n","# lower - приведение слов к нижнему регистру\n","# split - разделитель между словами\n","# oov_token - на какое слово будем заменять слова, которые выше по частоте, чем numWords\n","# char_level - разбитие по буквам или по словам\n","\n","tokenizer = Tokenizer(num_words=numWords,\n","                      filters='!\"#$%&()*+,-–—./…:;<=>?@[\\\\]^_`{|}~«»\\t\\n\\xa0\\ufeff',\n","                      lower=True,\n","                      split=' ',\n","                      oov_token='unknown',\n","                      char_level=False)\n","\n","tokenizer.fit_on_texts(trainText) # Cоберем словарь частотности\n","items = list(tokenizer.word_index.items()) # Получаем индексы слов"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fr3A6kK3LIXU","executionInfo":{"status":"ok","timestamp":1638196879274,"user_tz":-180,"elapsed":521,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"1fde93cb-61d2-4b08-8d18-9c9b9a56945f"},"source":["# print(\"Самые часто встречающиеся слова:\")\n","# print(items[:10]) # Самые часто встречающиеся слова\n","# print()\n","# print(\"Самые редко встречающиеся слова:\")\n","# print(items[-10:])\n","# print()\n","# print(\"Размер словаря:\", len(items))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Самые часто встречающиеся слова:\n","[('unknown', 1), ('негатив', 2), ('позитив', 3), ('нейтральная', 4), ('обучение', 5), ('обучающая', 6)]\n","\n","Самые редко встречающиеся слова:\n","[('unknown', 1), ('негатив', 2), ('позитив', 3), ('нейтральная', 4), ('обучение', 5), ('обучающая', 6)]\n","\n","Размер словаря: 6\n"]}]},{"cell_type":"code","metadata":{"id":"5U-wZVPuL1kA"},"source":["# # Тестирование словаря\n","# inputWord = input(\"Введите слово: \")\n","# print(\"Индекс слова \",inputWord, \": \", tokenizer.word_index[inputWord])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P8W-qFO2MRY9"},"source":["# Преобразовываем тексты в последовательности индексов согласно частотному словарю\n","trainWordIndexes = tokenizer.texts_to_sequences(trainText)\n","testWordIndexes = tokenizer.texts_to_sequences(testText)\n","validationWordIndexes = tokenizer.texts_to_sequences(validationText)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b-bM8fX5MluU","executionInfo":{"status":"ok","timestamp":1638202826421,"user_tz":-180,"elapsed":504,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d4050d05-a4ba-481a-a9a1-958b56fa18e2"},"source":["# Проверим преобразование\n","print(\"Фрагмент обучающего текста:\")\n","print(\"В виде оригинального текста:              \", trainText[2][:24])\n","print(\"Он же в виде последовательности индексов: \", trainWordIndexes[0][:3], '\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Фрагмент обучающего текста:\n","В виде оригинального текста:               Среди ликвидированных бо\n","Он же в виде последовательности индексов:  [166, 1, 7625] \n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nnf_ZeR5NT41","executionInfo":{"status":"ok","timestamp":1638212740853,"user_tz":-180,"elapsed":258,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"90ac8d34-cffd-4796-f464-5f948def6c2a"},"source":["print(\"Статистика по обучающим текстам:\")\n","\n","symbolsTrainText = 0 # Объявляем переменную для подсчета символов в обучающих текстах\n","wordsTrainText = 0 # Объявляем переменную для подсчета слов в обучающих текстах\n","\n","for i in range(labelsNum): # Проходим по всем классам\n","  print(labels[i], \" \"*(10-len(labels[i])), len(trainText[i]), \"символов, \", len(trainWordIndexes[i]), \"слов\")\n","  symbolsTrainText += len(trainText[i]) # Считаем символы\n","  wordsTrainText += len(trainWordIndexes[i]) # Считаем слова \n","\n","print('----')\n","print(\"В сумме \", symbolsTrainText, \" символов, \", wordsTrainText, \" слов \\n\")\n","print()\n","print(\"Статистика по тестовым текстам:\")\n","\n","symbolsTestText = 0 # Объявляем переменную для подсчета символов в тестовых текстах\n","wordsTestText = 0 # Объявляем переменную для подсчета слов в тестовых текстах\n","\n","for i in range(labelsNum): #Проходим по всем классам\n","  print(labels[i], ' '*(10-len(labels[i])), len(testText[i]), \"символов, \", len(testWordIndexes[i]), \"слов\")\n","  symbolsTestText += len(testText[i]) #Считаем символы\n","  wordsTestText += len(testWordIndexes[i]) #Считаем слова \n","print('----')\n","print(\"В сумме \", symbolsTestText, \" символов, \", wordsTestText, \" слов\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Статистика по обучающим текстам:\n","Negative    2392086 символов,  327118 слов\n","Neutral     2512106 символов,  323090 слов\n","Positive    2774053 символов,  382915 слов\n","----\n","В сумме  7678245  символов,  1033123  слов \n","\n","\n","Статистика по тестовым текстам:\n","Negative    339536 символов,  47120 слов\n","Neutral     309631 символов,  40959 слов\n","Positive    310516 символов,  40873 слов\n","----\n","В сумме  959683  символов,  128952  слов\n"]}]},{"cell_type":"markdown","metadata":{"id":"p8NaD-WcNwvF"},"source":["Функции для формирования выборок"]},{"cell_type":"code","metadata":{"id":"dWRb5y5MNpR4"},"source":["# Формирование обучающей выборки по листу индексов слов\n","# путем разделения на короткие векторы\n","# wordIndexes - массив индексов\n","# xLen - размер окна\n","# step - шаг окна\n","def getSetFromIndexes(wordIndexes, xLen, step):\n","  xText = []\n","  wordsLen = len(wordIndexes) # Считаем количество слов\n","  index = 0 # Задаем начальный индекс \n","\n","  while (index + xLen <= wordsLen): # Идём по всей длине вектора индексов\n","    xText.append(wordIndexes[index:index+xLen]) # \"Откусываем\" векторы длины xLen\n","    index += step # Смещаеммся вперёд на step\n","    \n","  return xText\n","\n","\n","# Формирование обучающей и проверочной выборки для каждого класса\n","# wordIndexes - массив индексов\n","# xLen - размер окна\n","# step - шаг окна\n","def createSetsMultiClasses(wordIndexes, xLen, step): # Функция принимает последовательность индексов, размер окна, шаг окна\n","  nClasses = len(wordIndexes) # Количество классов\n","  classesXSamples = []        # Здесь будет список размером \"кол-во классов*кол-во окон в тексте*длину окна (например, 6 по 1341*1000)\"\n","  for wI in wordIndexes:      # Для каждого текста выборки из последовательности индексов\n","    classesXSamples.append(getSetFromIndexes(wI, xLen, step))\n","\n","  # Формируем один общий xSamples\n","  xSamples = []\n","  ySamples = []\n","  \n","  for t in range(nClasses):\n","    xT = classesXSamples[t]\n","    for i in range(len(xT)): # Перебираем каждое окно определенного класса\n","      xSamples.append(xT[i]) # Добавляем в общий список выборки\n","      ySamples.append(utils.to_categorical(t, nClasses)) # Добавляем соответствующий вектор класса\n","\n","  xSamples = np.array(xSamples)\n","  ySamples = np.array(ySamples)\n","\n","  \n","  return (xSamples, ySamples)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mxdua6PYkzkC"},"source":["#Установка важных параметров"]},{"cell_type":"code","metadata":{"id":"nXWfO0zNO88J"},"source":["# Задаём базовые параметры\n","xLen = 100 # Размер окна (количество слов в векторе)\n","step = 100 # Шаг разбиения текста на векторы\n","# step = 500 # Шаг разбиения текста на векторы"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yuczpcnjPAS2","executionInfo":{"status":"ok","timestamp":1638213085444,"user_tz":-180,"elapsed":592,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"2fd423cc-8d09-49fa-9570-2345a092af72"},"source":["# Формируем выборки\n","xTrainId, yTrain = createSetsMultiClasses(trainWordIndexes, xLen, step)\n","xTestId, yTest = createSetsMultiClasses(testWordIndexes, xLen, xLen)\n","xValidationId, yValidation = createSetsMultiClasses(testWordIndexes, xLen, xLen)\n","print(\"Размерности тренировочного набора\")\n","print(xTrainId.shape)\n","print(yTrain.shape)\n","print()\n","print(\"Размерности проверочного набора\")\n","print(xValidationId.shape)\n","print(yValidation.shape)\n","print()\n","print(\"Размерности тестового набора\")\n","print(xTestId.shape)\n","print(yTest.shape)\n","print()\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размерности тренировочного набора\n","(10330, 100)\n","(10330, 3)\n","\n","Размерности проверочного набора\n","(1288, 100)\n","(1288, 3)\n","\n","Размерности тестового набора\n","(1288, 100)\n","(1288, 3)\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ndL5g2EyPqy7","executionInfo":{"status":"ok","timestamp":1638213087612,"user_tz":-180,"elapsed":246,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"05e642ec-34d7-47e0-9ce0-23d404fc3412"},"source":["print(xTrainId[0])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  166     1  7625  3353  1872     2   541   810  4572   127   485  1405\n","  1872    11   117     1  4305     2 15096     2  4870 12524  5991  3058\n","  1587  1526     2   152  7626  3059  2221  3460     8   216    47     6\n","  1422  3230  2983   938 15097  5605   991  2774   517   442     8    47\n","     1  1101   513    41     1   480  1038  3138  3231    26  9428  3230\n","   409  9429     3     1   915    12  1680     3 10767  8895  5416     1\n","     3     1     2  2984     7  8415  3461     2    56   236   728    75\n","    65   465     8    47  1165 13652    12 15098 19593   206  5606  7280\n","    41   170  6235  4036]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cVDds6jKQGqs","executionInfo":{"status":"ok","timestamp":1638213090347,"user_tz":-180,"elapsed":258,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"81a3567b-2287-4c14-886d-810660ee0a40"},"source":["# Не преобразуем в Bag Of Words\n","\n","# xTrain  = tokenizer.sequences_to_matrix(xTrainId.tolist())\n","# xTest  = tokenizer.sequences_to_matrix(xTestId.tolist())\n","\n","xTrain = xTrainId\n","xTest  = xTestId\n","xValidation = xValidationId\n","\n","print(\"Размерность обучайющей выборки\")\n","print(xTrain.shape)\n","print(yTrain.shape)\n","\n","print()\n","\n","print(\"Размерность тестовой выборки\")\n","print(xTest.shape)\n","print(yTest.shape)\n","\n","print()\n","\n","print(\"Размерность проверочной выборки\")\n","print(xValidation.shape)\n","print(yValidation.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размерность обучайющей выборки\n","(10330, 100)\n","(10330, 3)\n","\n","Размерность тестовой выборки\n","(1288, 100)\n","(1288, 3)\n","\n","Размерность проверочной выборки\n","(1288, 100)\n","(1288, 3)\n"]}]},{"cell_type":"markdown","metadata":{"id":"LKEckmaZQnkJ"},"source":["Нейросеть для классификации текстов на базе RNN"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5jTU1JvQjzh","executionInfo":{"status":"ok","timestamp":1638213093066,"user_tz":-180,"elapsed":9,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"058de441-84d3-468c-8d26-213b1d59ee12"},"source":["modelRNN = Sequential()\n","\n","modelRNN.add(Embedding(numWords, 5, input_length=xLen))\n","modelRNN.add(SpatialDropout1D(0.2))\n","modelRNN.add(BatchNormalization())\n","\n","modelRNN.add(SimpleRNN(16, dropout=0.2, recurrent_dropout=0.2, activation=\"relu\"))\n","modelRNN.add(Dense(3, activation='softmax'))\n","\n","modelRNN.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelRNN.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_4 (Embedding)     (None, 100, 5)            100000    \n","                                                                 \n"," spatial_dropout1d_4 (Spatia  (None, 100, 5)           0         \n"," lDropout1D)                                                     \n","                                                                 \n"," batch_normalization_4 (Batc  (None, 100, 5)           20        \n"," hNormalization)                                                 \n","                                                                 \n"," simple_rnn_4 (SimpleRNN)    (None, 16)                352       \n","                                                                 \n"," dense_4 (Dense)             (None, 3)                 51        \n","                                                                 \n","=================================================================\n","Total params: 100,423\n","Trainable params: 100,413\n","Non-trainable params: 10\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kw0fZMnGQ3TE","executionInfo":{"status":"ok","timestamp":1638213654842,"user_tz":-180,"elapsed":559641,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"ea0f6062-be7c-4372-81c1-7b5fe5902d67"},"source":["# Обучаем сеть\n","historyRNN = modelRNN.fit(xTrain, \n","                          yTrain, \n","                          epochs=20,\n","                          batch_size=128,\n","                          validation_data= (xValidation, yValidation)\n","                          )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","81/81 [==============================] - 80s 284ms/step - loss: 1.1616 - accuracy: 0.3479 - val_loss: 1.0980 - val_accuracy: 0.3470\n","Epoch 2/20\n","81/81 [==============================] - 22s 278ms/step - loss: 1.0910 - accuracy: 0.3872 - val_loss: 1.0981 - val_accuracy: 0.3346\n","Epoch 3/20\n","81/81 [==============================] - 22s 277ms/step - loss: 1.0664 - accuracy: 0.4242 - val_loss: 1.0973 - val_accuracy: 0.3502\n","Epoch 4/20\n","81/81 [==============================] - 22s 276ms/step - loss: 1.0366 - accuracy: 0.4549 - val_loss: 1.0961 - val_accuracy: 0.3525\n","Epoch 5/20\n","81/81 [==============================] - 22s 277ms/step - loss: 0.9995 - accuracy: 0.4928 - val_loss: 1.0953 - val_accuracy: 0.3525\n","Epoch 6/20\n","81/81 [==============================] - 22s 278ms/step - loss: 0.9467 - accuracy: 0.5285 - val_loss: 1.0972 - val_accuracy: 0.3610\n","Epoch 7/20\n","81/81 [==============================] - 22s 272ms/step - loss: 0.8938 - accuracy: 0.5665 - val_loss: 1.1133 - val_accuracy: 0.3734\n","Epoch 8/20\n","81/81 [==============================] - 22s 270ms/step - loss: 0.8422 - accuracy: 0.5963 - val_loss: 1.1409 - val_accuracy: 0.3812\n","Epoch 9/20\n","81/81 [==============================] - 22s 270ms/step - loss: 0.7919 - accuracy: 0.6292 - val_loss: 1.1921 - val_accuracy: 0.3758\n","Epoch 10/20\n","81/81 [==============================] - 22s 270ms/step - loss: 0.7454 - accuracy: 0.6587 - val_loss: 1.2441 - val_accuracy: 0.3851\n","Epoch 11/20\n","81/81 [==============================] - 22s 277ms/step - loss: 0.7129 - accuracy: 0.6709 - val_loss: 1.2784 - val_accuracy: 0.3921\n","Epoch 12/20\n","81/81 [==============================] - 23s 283ms/step - loss: 0.6711 - accuracy: 0.6948 - val_loss: 1.3258 - val_accuracy: 0.3835\n","Epoch 13/20\n","81/81 [==============================] - 23s 280ms/step - loss: 0.6372 - accuracy: 0.7091 - val_loss: 1.3573 - val_accuracy: 0.3789\n","Epoch 14/20\n","81/81 [==============================] - 22s 277ms/step - loss: 0.6092 - accuracy: 0.7294 - val_loss: 1.4011 - val_accuracy: 0.3944\n","Epoch 15/20\n","81/81 [==============================] - 23s 281ms/step - loss: 0.5894 - accuracy: 0.7348 - val_loss: 1.4446 - val_accuracy: 0.3890\n","Epoch 16/20\n","81/81 [==============================] - 23s 279ms/step - loss: 0.5685 - accuracy: 0.7453 - val_loss: 1.4698 - val_accuracy: 0.3998\n","Epoch 17/20\n","81/81 [==============================] - 23s 278ms/step - loss: 0.5463 - accuracy: 0.7527 - val_loss: 1.5040 - val_accuracy: 0.4092\n","Epoch 18/20\n","81/81 [==============================] - 23s 280ms/step - loss: 0.5335 - accuracy: 0.7590 - val_loss: 1.5248 - val_accuracy: 0.4045\n","Epoch 19/20\n","81/81 [==============================] - 23s 279ms/step - loss: 0.5136 - accuracy: 0.7705 - val_loss: 1.5699 - val_accuracy: 0.4177\n","Epoch 20/20\n","81/81 [==============================] - 22s 278ms/step - loss: 0.4969 - accuracy: 0.7831 - val_loss: 1.5734 - val_accuracy: 0.4138\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"H3Sakk0YQ7j4","executionInfo":{"status":"ok","timestamp":1638213656244,"user_tz":-180,"elapsed":590,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"f2d18f5a-3284-4a3c-ab3b-85a1bcd31f27"},"source":["# Результаты обучения\n","plt.plot(historyRNN.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyRNN.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"kwBAB-gmYLi2"},"source":["Нейросеть для классификации текстов на базе LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ls7ba8akZUzJ","executionInfo":{"status":"ok","timestamp":1638213754032,"user_tz":-180,"elapsed":702,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"98c8afd4-6680-489b-8950-0eac2b7e9155"},"source":["modelLSTM = Sequential()\n","\n","modelLSTM.add(Embedding(numWords, 100, input_length=xLen))\n","modelLSTM.add(SpatialDropout1D(0.2))\n","modelLSTM.add(BatchNormalization())\n","\n","modelLSTM.add(LSTM(10))\n","modelLSTM.add(Dense(3, activation='softmax'))\n","\n","modelLSTM.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelLSTM.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_5 (Embedding)     (None, 100, 100)          2000000   \n","                                                                 \n"," spatial_dropout1d_5 (Spatia  (None, 100, 100)         0         \n"," lDropout1D)                                                     \n","                                                                 \n"," batch_normalization_5 (Batc  (None, 100, 100)         400       \n"," hNormalization)                                                 \n","                                                                 \n"," lstm (LSTM)                 (None, 10)                4440      \n","                                                                 \n"," dense_5 (Dense)             (None, 3)                 33        \n","                                                                 \n","=================================================================\n","Total params: 2,004,873\n","Trainable params: 2,004,673\n","Non-trainable params: 200\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z7G4CMhoZ7QS","executionInfo":{"status":"ok","timestamp":1638213840788,"user_tz":-180,"elapsed":84548,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"04c57224-ba8b-44f5-aeec-aed438087bd2"},"source":["# Обучаем сеть\n","historyLSTM = modelLSTM.fit(xTrain, \n","                            yTrain, \n","                            epochs=20,\n","                            batch_size=128,\n","                            validation_data= (xValidation, yValidation)\n","                            )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","81/81 [==============================] - 7s 35ms/step - loss: 1.0663 - accuracy: 0.4199 - val_loss: 1.1037 - val_accuracy: 0.3168\n","Epoch 2/20\n","81/81 [==============================] - 2s 27ms/step - loss: 0.8099 - accuracy: 0.6808 - val_loss: 1.4597 - val_accuracy: 0.3750\n","Epoch 3/20\n","81/81 [==============================] - 2s 27ms/step - loss: 0.4892 - accuracy: 0.8305 - val_loss: 1.8971 - val_accuracy: 0.4177\n","Epoch 4/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.2632 - accuracy: 0.9178 - val_loss: 2.2372 - val_accuracy: 0.4379\n","Epoch 5/20\n","81/81 [==============================] - 2s 27ms/step - loss: 0.1506 - accuracy: 0.9570 - val_loss: 2.6371 - val_accuracy: 0.4247\n","Epoch 6/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0987 - accuracy: 0.9741 - val_loss: 2.2011 - val_accuracy: 0.4992\n","Epoch 7/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0716 - accuracy: 0.9798 - val_loss: 1.9689 - val_accuracy: 0.5194\n","Epoch 8/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0540 - accuracy: 0.9842 - val_loss: 1.9830 - val_accuracy: 0.5031\n","Epoch 9/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0439 - accuracy: 0.9872 - val_loss: 2.0716 - val_accuracy: 0.4798\n","Epoch 10/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0404 - accuracy: 0.9874 - val_loss: 2.1195 - val_accuracy: 0.4612\n","Epoch 11/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0317 - accuracy: 0.9894 - val_loss: 2.1950 - val_accuracy: 0.4682\n","Epoch 12/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0287 - accuracy: 0.9902 - val_loss: 2.1813 - val_accuracy: 0.4876\n","Epoch 13/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0267 - accuracy: 0.9913 - val_loss: 2.2675 - val_accuracy: 0.4728\n","Epoch 14/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0252 - accuracy: 0.9909 - val_loss: 2.2494 - val_accuracy: 0.4744\n","Epoch 15/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0231 - accuracy: 0.9908 - val_loss: 2.3352 - val_accuracy: 0.4736\n","Epoch 16/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0225 - accuracy: 0.9924 - val_loss: 2.3661 - val_accuracy: 0.4689\n","Epoch 17/20\n","81/81 [==============================] - 2s 27ms/step - loss: 0.0199 - accuracy: 0.9920 - val_loss: 2.3788 - val_accuracy: 0.4658\n","Epoch 18/20\n","81/81 [==============================] - 2s 27ms/step - loss: 0.0187 - accuracy: 0.9923 - val_loss: 2.5349 - val_accuracy: 0.4689\n","Epoch 19/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0183 - accuracy: 0.9927 - val_loss: 2.5705 - val_accuracy: 0.4589\n","Epoch 20/20\n","81/81 [==============================] - 2s 26ms/step - loss: 0.0171 - accuracy: 0.9924 - val_loss: 2.4904 - val_accuracy: 0.4666\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"TUs3q6JfaOQ1","executionInfo":{"status":"ok","timestamp":1638213842334,"user_tz":-180,"elapsed":816,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"8d363179-8e00-4b97-b2ac-491c1d046807"},"source":["# Результаты обучения\n","plt.plot(historyLSTM.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyLSTM.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1jgZwyDwRTVN"},"source":["Проверяем работу обученной нейросети LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4Nip_hUS1T9","executionInfo":{"status":"ok","timestamp":1638213847191,"user_tz":-180,"elapsed":1068,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"3975eb00-05a7-423e-a329-dbea5de0e254"},"source":["# Проверяем точность на тестовой выборке\n","\n","rightAnswer = [0,0,0]\n","totalAnswer = [0,0,0]\n","\n","# Получаем результаты распознавания для каждого класса\n","currPred = modelLSTM.predict(xTest)\n","# Определяем номер распознанного класса для каждохо вектора\n","currOut = np.argmax(currPred, axis=1)\n","# Определяем правильный класс для каждохо вектора\n","yOut = np.argmax(yTest, axis=1)\n","\n","print(currPred.shape)\n","print(currOut.shape)\n","print(yOut.shape)\n","print()\n","\n","\n","# Считаем сколько ответов всего и сколько из них правильных\n","for i in range(len(yOut)):\n","  predictA = currOut[i]\n","  rightA   = yOut[i]\n","\n","  totalAnswer[rightA] += 1\n","  if predictA == rightA:\n","    rightAnswer[rightA] += 1\n","\n","# Подсчитываем точность классификации\n","print(\"Точность распознавания текстов писателей\")\n","for i in range(labelsNum):\n","  print(\"{:12s}: {:3d} из {:3d} - {:3.2f}%\".format(labels[i], rightAnswer[i], totalAnswer[i], (rightAnswer[i]/totalAnswer[i]*100)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1288, 3)\n","(1288,)\n","(1288,)\n","\n","Точность распознавания текстов писателей\n","Negative    : 279 из 471 - 59.24%\n","Neutral     : 188 из 409 - 45.97%\n","Positive    : 134 из 408 - 32.84%\n"]}]},{"cell_type":"markdown","metadata":{"id":"ySmIOd1zb0Uo"},"source":["Нейросеть для классификации текстов на базе двух слоев LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YuZTcmyeb3ka","executionInfo":{"status":"ok","timestamp":1638213850679,"user_tz":-180,"elapsed":829,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"b9aa272c-bd49-43d6-9cc0-ed8bf4aa653e"},"source":["modelLSTM2 = Sequential()\n","\n","modelLSTM2.add(Embedding(numWords, 100, input_length=xLen))\n","modelLSTM2.add(SpatialDropout1D(0.2))\n","modelLSTM2.add(BatchNormalization())\n","\n","modelLSTM2.add(LSTM(10, return_sequences=1))\n","modelLSTM2.add(LSTM(5))\n","modelLSTM2.add(Dense(3, activation='softmax'))\n","\n","modelLSTM2.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelLSTM2.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_6 (Embedding)     (None, 100, 100)          2000000   \n","                                                                 \n"," spatial_dropout1d_6 (Spatia  (None, 100, 100)         0         \n"," lDropout1D)                                                     \n","                                                                 \n"," batch_normalization_6 (Batc  (None, 100, 100)         400       \n"," hNormalization)                                                 \n","                                                                 \n"," lstm_1 (LSTM)               (None, 100, 10)           4440      \n","                                                                 \n"," lstm_2 (LSTM)               (None, 5)                 320       \n","                                                                 \n"," dense_6 (Dense)             (None, 3)                 18        \n","                                                                 \n","=================================================================\n","Total params: 2,005,178\n","Trainable params: 2,004,978\n","Non-trainable params: 200\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"f24X95AhcCRo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638213939917,"user_tz":-180,"elapsed":86283,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"82a4b7ad-98ce-480e-f755-dc8d08d60393"},"source":["# Обучаем сеть\n","historyLSTM2 = modelLSTM2.fit(xTrain, \n","                              yTrain, \n","                              epochs=20,\n","                              batch_size=128,\n","                              validation_data= (xValidation, yValidation)\n","                              )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","81/81 [==============================] - 9s 59ms/step - loss: 1.0365 - accuracy: 0.4749 - val_loss: 1.0982 - val_accuracy: 0.3680\n","Epoch 2/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.7526 - accuracy: 0.7106 - val_loss: 1.3222 - val_accuracy: 0.4177\n","Epoch 3/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.4712 - accuracy: 0.8461 - val_loss: 1.6386 - val_accuracy: 0.4340\n","Epoch 4/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.2942 - accuracy: 0.9116 - val_loss: 1.7364 - val_accuracy: 0.4589\n","Epoch 5/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.2026 - accuracy: 0.9375 - val_loss: 1.8579 - val_accuracy: 0.4682\n","Epoch 6/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.1495 - accuracy: 0.9519 - val_loss: 1.9534 - val_accuracy: 0.4744\n","Epoch 7/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.1182 - accuracy: 0.9605 - val_loss: 1.8972 - val_accuracy: 0.4837\n","Epoch 8/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0943 - accuracy: 0.9662 - val_loss: 2.0262 - val_accuracy: 0.4837\n","Epoch 9/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.0767 - accuracy: 0.9734 - val_loss: 2.0763 - val_accuracy: 0.4744\n","Epoch 10/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0651 - accuracy: 0.9770 - val_loss: 2.1153 - val_accuracy: 0.4775\n","Epoch 11/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.0559 - accuracy: 0.9795 - val_loss: 2.2018 - val_accuracy: 0.4697\n","Epoch 12/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0488 - accuracy: 0.9812 - val_loss: 2.3026 - val_accuracy: 0.4666\n","Epoch 13/20\n","81/81 [==============================] - 4s 48ms/step - loss: 0.0429 - accuracy: 0.9848 - val_loss: 2.3566 - val_accuracy: 0.4736\n","Epoch 14/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0405 - accuracy: 0.9850 - val_loss: 2.4113 - val_accuracy: 0.4752\n","Epoch 15/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0371 - accuracy: 0.9864 - val_loss: 2.4733 - val_accuracy: 0.4643\n","Epoch 16/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.0337 - accuracy: 0.9882 - val_loss: 2.5881 - val_accuracy: 0.4596\n","Epoch 17/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0310 - accuracy: 0.9892 - val_loss: 2.6485 - val_accuracy: 0.4651\n","Epoch 18/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.0295 - accuracy: 0.9894 - val_loss: 2.6185 - val_accuracy: 0.4783\n","Epoch 19/20\n","81/81 [==============================] - 4s 46ms/step - loss: 0.0289 - accuracy: 0.9897 - val_loss: 2.7369 - val_accuracy: 0.4689\n","Epoch 20/20\n","81/81 [==============================] - 4s 47ms/step - loss: 0.0271 - accuracy: 0.9904 - val_loss: 2.6956 - val_accuracy: 0.4759\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"AR3VA_FDch2s","executionInfo":{"status":"ok","timestamp":1638213971215,"user_tz":-180,"elapsed":816,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"5f8c635d-d41f-4744-9960-65feda60e375"},"source":["# Результаты обучения\n","plt.plot(historyLSTM2.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyLSTM2.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"4DyNTHrBcpqR"},"source":["Проверяем работу обученной нейросети с двумя слоями LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EPoqHpIXctNX","executionInfo":{"status":"ok","timestamp":1638213975594,"user_tz":-180,"elapsed":1580,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"37cc83ef-92ed-490a-9afb-2315ee13578e"},"source":["# Проверяем точность на тестовой выборке\n","\n","rightAnswer = [0,0,0]\n","totalAnswer = [0,0,0]\n","\n","# Получаем результаты распознавания для каждого класса\n","currPred = modelLSTM2.predict(xTest)\n","# Определяем номер распознанного класса для каждохо вектора\n","currOut = np.argmax(currPred, axis=1)\n","# Определяем правильный класс для каждохо вектора\n","yOut = np.argmax(yTest, axis=1)\n","\n","print(currPred.shape)\n","print(currOut.shape)\n","print(yOut.shape)\n","print()\n","\n","\n","# Считаем сколько ответов всего и сколько из них правильных\n","for i in range(len(yOut)):\n","  predictA = currOut[i]\n","  rightA   = yOut[i]\n","\n","  totalAnswer[rightA] += 1\n","  if predictA == rightA:\n","    rightAnswer[rightA] += 1\n","\n","# Подсчитываем точность классификации\n","print(\"Точность распознавания тональности текстов\")\n","for i in range(labelsNum):\n","  print(\"{:12s}: {:3d} из {:3d} - {:3.2f}%\".format(labels[i], rightAnswer[i], totalAnswer[i], (rightAnswer[i]/totalAnswer[i]*100)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1288, 3)\n","(1288,)\n","(1288,)\n","\n","Точность распознавания тональности текстов\n","Negative    : 276 из 471 - 58.60%\n","Neutral     : 186 из 409 - 45.48%\n","Positive    : 151 из 408 - 37.01%\n"]}]}]}