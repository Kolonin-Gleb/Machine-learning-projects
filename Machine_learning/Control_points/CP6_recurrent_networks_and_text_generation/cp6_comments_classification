{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1wOnkmUnLr3AfAMfD5cVV7686jgczgiHW","timestamp":1637750380505},{"file_id":"1jl7fk-gwedYl8Cm9ux3o852Y1zx9Wjov","timestamp":1637529012017},{"file_id":"1_uKclltIszcuWmp8H9yI4lE8RLI3Ty_7","timestamp":1636485470308}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"64t_8Ex5Ee2e"},"source":["# Классификация тональности комментариев с помощью LSTM, SimpleRNN"]},{"cell_type":"code","metadata":{"id":"e8O4-nPxEUqJ"},"source":["from google.colab import files # Для работы с файлами \n","import numpy as np # Для работы с данными \n","import matplotlib.pyplot as plt # Для вывода графиков\n","import os # Для работы с файлами\n","%matplotlib inline\n","\n","from tensorflow.keras import utils # Для работы с категориальными данными\n","from tensorflow.keras.models import Sequential # Полносвязная модель\n","from tensorflow.keras.layers import Dense, Dropout, SpatialDropout1D, BatchNormalization, Flatten, Activation, Embedding, SimpleRNN, LSTM # Слои для сети\n","from tensorflow.keras.preprocessing.text import Tokenizer # Методы для работы с текстами\n","from tensorflow.keras.preprocessing.sequence import pad_sequences # Метод для работы с последовательностями\n","\n","from google.colab import drive # Для работы с Google Drive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVh9r519FDRx","executionInfo":{"status":"ok","timestamp":1638202507860,"user_tz":-180,"elapsed":527,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"715960eb-8d4f-4498-825a-67d953bee8f6"},"source":["drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"gUMbvEO7Fkqb"},"source":["# Удаляем директорию с распакованными данными (если есть)\n","!rm -rf /content/9\\ groups"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gRCeArwCFwgL"},"source":["!unzip -q '/content/drive/MyDrive/Colab Notebooks/Machine_learning/Datasets/PolSentiLex (comments)/edited/9 groups of comments/9 groups.zip' -d /content/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cm6ZwWLrF9V3"},"source":["# Функция для загрузки файла\n","def loadText(fileName):\n","  f = open(fileName, 'r') # Открываем файл в режиме чтения\n","  text = f.read()         # Читаем текст\n","  text = text.replace(\"\\n\", \" \") # Заменяем переносы строк на пробелы\n","  text = text.replace(\"\\r\", \" \") # Заменяем переносы строк на пробелы\n","  text = text.replace(\"\\t\", \" \") # Заменяем табуляции на пробелы\n","  f.close()\n","  \n","  return text\n","\n","labels = [\"Negative\", \"Neutral\", \"Positive\"] # Наши авторы\n","labelsNum = len(labels) # Количество авторов"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EWTXPrHUHRGF","executionInfo":{"status":"ok","timestamp":1638202804680,"user_tz":-180,"elapsed":445,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"8d909300-f99f-463b-de2e-572cf797afeb"},"source":["# Загружаем тексты из обучающей и тренировочной выборок\n","\n","trainText = [] # Обучающие тексты\n","validationText = [] # Проверочные тексты\n","testText = []  # Тестовые тексты\n","\n","fileList = os.listdir('9 groups') # Получаем список всех файлов\n","print(fileList)\n","for label in labels:\n","  for file in fileList:\n","    if label in file:\n","      if 'train' in file:\n","        trainText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в обучающую выборку')\n","      if 'test' in file:\n","        testText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в тестовую выборку')\n","      if 'validation' in file:\n","        validationText.append(loadText('9 groups/' + file))\n","        print(file, 'добавлен в проверочную выборку')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Neutral test.txt', 'Neutral validation.txt', 'desktop.ini', 'Positive validation.txt', 'Negative train.txt', 'Positive train.txt', 'Negative validation.txt', 'Negative test.txt', 'Neutral train.txt', 'Positive test.txt']\n","Negative train.txt добавлен в обучающую выборку\n","Negative validation.txt добавлен в проверочную выборку\n","Negative test.txt добавлен в тестовую выборку\n","Neutral test.txt добавлен в тестовую выборку\n","Neutral validation.txt добавлен в проверочную выборку\n","Neutral train.txt добавлен в обучающую выборку\n","Positive validation.txt добавлен в проверочную выборку\n","Positive train.txt добавлен в обучающую выборку\n","Positive test.txt добавлен в тестовую выборку\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrcchnVgJJqN","executionInfo":{"status":"ok","timestamp":1638202809998,"user_tz":-180,"elapsed":358,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"12bf95ae-7a9e-4b10-bdf6-b1deac08f6b5"},"source":["print(\"Количество загруженных тренировочных текстов:\", len(trainText))\n","print(\"Количество загруженных тестовых текстов:\", len(testText))\n","print(\"Количество загруженных проверочных текстов:\", len(validationText))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество загруженных тренировочных текстов: 3\n","Количество загруженных тестовых текстов: 3\n","Количество загруженных проверочных текстов: 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gpRxC6kJ0QI"},"source":["Токенизируем тексты"]},{"cell_type":"code","metadata":{"id":"A7esyuMeJuzV"},"source":["numWords = 20000 # Количество слов/индексов, которое мы будем учитывать при обучении\n","\n","# Tokenizer - встроенная в Keras функция для разбиения текста и превращения\n","# в слов в числовые значения с учётом частотности\n","\n","# num_words - максимальное количество слов/индексов, учитываемое при составлении словаря\n","# filters - список ненужных символов, которые будут удалены из текстов\n","# lower - приведение слов к нижнему регистру\n","# split - разделитель между словами\n","# oov_token - на какое слово будем заменять слова, которые выше по частоте, чем numWords\n","# char_level - разбитие по буквам или по словам\n","\n","tokenizer = Tokenizer(num_words=numWords,\n","                      filters='!\"#$%&()*+,-–—./…:;<=>?@[\\\\]^_`{|}~«»\\t\\n\\xa0\\ufeff',\n","                      lower=True,\n","                      split=' ',\n","                      oov_token='unknown',\n","                      char_level=False)\n","\n","tokenizer.fit_on_texts(trainText) # Cоберем словарь частотности\n","items = list(tokenizer.word_index.items()) # Получаем индексы слов"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fr3A6kK3LIXU","executionInfo":{"status":"ok","timestamp":1638196879274,"user_tz":-180,"elapsed":521,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"1fde93cb-61d2-4b08-8d18-9c9b9a56945f"},"source":["# print(\"Самые часто встречающиеся слова:\")\n","# print(items[:10]) # Самые часто встречающиеся слова\n","# print()\n","# print(\"Самые редко встречающиеся слова:\")\n","# print(items[-10:])\n","# print()\n","# print(\"Размер словаря:\", len(items))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Самые часто встречающиеся слова:\n","[('unknown', 1), ('негатив', 2), ('позитив', 3), ('нейтральная', 4), ('обучение', 5), ('обучающая', 6)]\n","\n","Самые редко встречающиеся слова:\n","[('unknown', 1), ('негатив', 2), ('позитив', 3), ('нейтральная', 4), ('обучение', 5), ('обучающая', 6)]\n","\n","Размер словаря: 6\n"]}]},{"cell_type":"code","metadata":{"id":"5U-wZVPuL1kA"},"source":["# # Тестирование словаря\n","# inputWord = input(\"Введите слово: \")\n","# print(\"Индекс слова \",inputWord, \": \", tokenizer.word_index[inputWord])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P8W-qFO2MRY9"},"source":["# Преобразовываем тексты в последовательности индексов согласно частотному словарю\n","trainWordIndexes = tokenizer.texts_to_sequences(trainText)\n","testWordIndexes = tokenizer.texts_to_sequences(testText)\n","validationWordIndexes = tokenizer.texts_to_sequences(validationText)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b-bM8fX5MluU","executionInfo":{"status":"ok","timestamp":1638202826421,"user_tz":-180,"elapsed":504,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d4050d05-a4ba-481a-a9a1-958b56fa18e2"},"source":["# Проверим преобразование\n","print(\"Фрагмент обучающего текста:\")\n","print(\"В виде оригинального текста:              \", trainText[2][:24])\n","print(\"Он же в виде последовательности индексов: \", trainWordIndexes[0][:3], '\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Фрагмент обучающего текста:\n","В виде оригинального текста:               Среди ликвидированных бо\n","Он же в виде последовательности индексов:  [166, 1, 7625] \n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nnf_ZeR5NT41","executionInfo":{"status":"ok","timestamp":1638202834189,"user_tz":-180,"elapsed":375,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"1c50b89c-fa3f-4217-e6e5-5a46a5b1e839"},"source":["print(\"Статистика по обучающим текстам:\")\n","\n","symbolsTrainText = 0 # Объявляем переменную для подсчета символов в обучающих текстах\n","wordsTrainText = 0 # Объявляем переменную для подсчета слов в обучающих текстах\n","\n","for i in range(labelsNum): # Проходим по всем классам\n","  print(labels[i], \" \"*(10-len(labels[i])), len(trainText[i]), \"символов, \", len(trainWordIndexes[i]), \"слов\")\n","  symbolsTrainText += len(trainText[i]) # Считаем символы\n","  wordsTrainText += len(trainWordIndexes[i]) # Считаем слова \n","\n","print('----')\n","print(\"В сумме \", symbolsTrainText, \" символов, \", wordsTrainText, \" слов \\n\")\n","print()\n","print(\"Статистика по тестовым текстам:\")\n","\n","symbolsTestText = 0 # Объявляем переменную для подсчета символов в тестовых текстах\n","wordsTestText = 0 # Объявляем переменную для подсчета слов в тестовых текстах\n","\n","for i in range(labelsNum): #Проходим по всем классам\n","  print(labels[i], ' '*(10-len(labels[i])), len(testText[i]), \"символов, \", len(testWordIndexes[i]), \"слов\")\n","  symbolsTestText += len(testText[i]) #Считаем символы\n","  wordsTestText += len(testWordIndexes[i]) #Считаем слова \n","print('----')\n","print(\"В сумме \", symbolsTestText, \" символов, \", wordsTestText, \" слов\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Статистика по обучающим текстам:\n","Negative    2392086 символов,  327118 слов\n","Neutral     2512106 символов,  323090 слов\n","Positive    2774053 символов,  382915 слов\n","----\n","В сумме  7678245  символов,  1033123  слов \n","\n","\n","Статистика по тестовым текстам:\n","Negative    339536 символов,  47120 слов\n","Neutral     309631 символов,  40959 слов\n","Positive    310516 символов,  40873 слов\n","----\n","В сумме  959683  символов,  128952  слов\n"]}]},{"cell_type":"markdown","metadata":{"id":"p8NaD-WcNwvF"},"source":["Функции для формирования выборок"]},{"cell_type":"code","metadata":{"id":"dWRb5y5MNpR4"},"source":["# Формирование обучающей выборки по листу индексов слов\n","# путем разделения на короткие векторы\n","# wordIndexes - массив индексов\n","# xLen - размер окна\n","# step - шаг окна\n","def getSetFromIndexes(wordIndexes, xLen, step):\n","  xText = []\n","  wordsLen = len(wordIndexes) # Считаем количество слов\n","  index = 0 # Задаем начальный индекс \n","\n","  while (index + xLen <= wordsLen): # Идём по всей длине вектора индексов\n","    xText.append(wordIndexes[index:index+xLen]) # \"Откусываем\" векторы длины xLen\n","    index += step # Смещаеммся вперёд на step\n","    \n","  return xText\n","\n","\n","# Формирование обучающей и проверочной выборки для каждого класса\n","# wordIndexes - массив индексов\n","# xLen - размер окна\n","# step - шаг окна\n","def createSetsMultiClasses(wordIndexes, xLen, step): # Функция принимает последовательность индексов, размер окна, шаг окна\n","  nClasses = len(wordIndexes) # Количество классов\n","  classesXSamples = []        # Здесь будет список размером \"кол-во классов*кол-во окон в тексте*длину окна (например, 6 по 1341*1000)\"\n","  for wI in wordIndexes:      # Для каждого текста выборки из последовательности индексов\n","    classesXSamples.append(getSetFromIndexes(wI, xLen, step))\n","\n","  # Формируем один общий xSamples\n","  xSamples = []\n","  ySamples = []\n","  \n","  for t in range(nClasses):\n","    xT = classesXSamples[t]\n","    for i in range(len(xT)): # Перебираем каждое окно определенного класса\n","      xSamples.append(xT[i]) # Добавляем в общий список выборки\n","      ySamples.append(utils.to_categorical(t, nClasses)) # Добавляем соответствующий вектор класса\n","\n","  xSamples = np.array(xSamples)\n","  ySamples = np.array(ySamples)\n","\n","  \n","  return (xSamples, ySamples)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mxdua6PYkzkC"},"source":["#Установка важных параметров"]},{"cell_type":"code","metadata":{"id":"nXWfO0zNO88J"},"source":["# Задаём базовые параметры\n","xLen = 500 # Размер окна (количество слов в векторе)\n","#step = 60 # Шаг разбиения текста на векторы\n","step = 500 # Шаг разбиения текста на векторы"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yuczpcnjPAS2","executionInfo":{"status":"ok","timestamp":1638202873246,"user_tz":-180,"elapsed":339,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"bad9f3b7-3e7a-4480-9685-3aa060d25829"},"source":["# Формируем выборки\n","xTrainId, yTrain = createSetsMultiClasses(trainWordIndexes, xLen, step)\n","xTestId, yTest = createSetsMultiClasses(testWordIndexes, xLen, xLen)\n","xValidationId, yValidation = createSetsMultiClasses(testWordIndexes, xLen, xLen)\n","print(\"Размерности тренировочного набора\")\n","print(xTrainId.shape)\n","print(yTrain.shape)\n","print()\n","print(\"Размерности проверочного набора\")\n","print(xValidationId.shape)\n","print(yValidation.shape)\n","print()\n","print(\"Размерности тестового набора\")\n","print(xTestId.shape)\n","print(yTest.shape)\n","print()\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размерности тренировочного набора\n","(2065, 500)\n","(2065, 3)\n","\n","Размерности проверочного набора\n","(256, 500)\n","(256, 3)\n","\n","Размерности тестового набора\n","(256, 500)\n","(256, 3)\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ndL5g2EyPqy7","executionInfo":{"status":"ok","timestamp":1638202877408,"user_tz":-180,"elapsed":330,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"8af4608b-fe8e-4c87-eb6c-f0f6937697a1"},"source":["print(xTrainId[0])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  166     1  7625  3353  1872     2   541   810  4572   127   485  1405\n","  1872    11   117     1  4305     2 15096     2  4870 12524  5991  3058\n","  1587  1526     2   152  7626  3059  2221  3460     8   216    47     6\n","  1422  3230  2983   938 15097  5605   991  2774   517   442     8    47\n","     1  1101   513    41     1   480  1038  3138  3231    26  9428  3230\n","   409  9429     3     1   915    12  1680     3 10767  8895  5416     1\n","     3     1     2  2984     7  8415  3461     2    56   236   728    75\n","    65   465     8    47  1165 13652    12 15098 19593   206  5606  7280\n","    41   170  6235  4036  5992    11    33  2429 10049  3353   839   138\n"," 10768     8     2   664    46    43    52   184   121  1327  3462    41\n","     1  4708   797  2267 19594     1   351     5   742    26  5605  7280\n","     3  2482     9  2523   706   598  3463  3354    13    39    60   110\n","  3058    34     1     5     1    84     1   839     2  1764 11617     2\n","  1198  1091    78  5607 13653  5608  4871  3232     1   839    11    33\n","    16   743  2524     5   753  9430   374  3462     3  7627    41     1\n","     3  7628     1  1765  1385   218     2  3663  4709  9431 12525  7629\n","  1606     2 10769  1766  2721     1  6733 11618   811  5786     1    28\n","   343  3355     1    41    24   149 10050     1     1    31  2611   939\n","     6     1   103  2846     1    13  6997  2985     3  7281   909    32\n","     1   175     1     2     1   161  6734     7   509   578   388  3563\n","  6735     5  6736  7986   121     1     5 13654  3356  6734     5  1328\n","  5609 13654  3356    16 10051   155   228   648     1   486   443     6\n","    16     1     5  7987    15  5417   326  5610     1    43   389  1258\n","    11   117    16 12526   219   510    41     5    24   401  5993   410\n","     1     1 12527  1423     2    70     1     8   246   228     6   561\n","    28     1   175     1     2   845  5148 16929 13655  1681    17  1658\n","   511 10052  4306   115   754   729   506  3782  1607     5   206    87\n","    26 19595   857    48     5  6236   505    19    67    71     3     5\n","     1   113    57  4037 15099   753  2222    76  7988 16930 15100    31\n","     1     3     1  2908   188 12528 13655   178 15101  1329     1     5\n","     1     1  2658  1799    22   776   229   624    11  1708     1   505\n","    19  1465   149     1   707     3    24    30    62   160     1   246\n","  3893 13655   777     3   777    85     1  7282     2     1   404    11\n","   518   585   788   360  6998  7630     2   609     1    94   421    43\n","  1307  9432   188 12529  1907     1     3     6    35     1    11  3139\n","  5611   148  4307  4455   402    27    10  2310   206    97    41    57\n"," 16931  1831     3  3894     1    23  2775     3    27   364  4998  1259\n","    77    20     1   940     7     1     9   423     1     3    39  1244\n","  8416     1     1  5787    10    17  5418  3895     6  1278  5788     8\n","    30     5   344   470   689     2    46    20  8896   288  7283   641\n","  7989   116  7990     1     3 13656  1215     3  6476 15102     1  5612\n","  5787 19596     3    72     1   229     1 12530]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cVDds6jKQGqs","executionInfo":{"status":"ok","timestamp":1638202882374,"user_tz":-180,"elapsed":319,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"35178891-2ce5-4628-be06-3ac561ddbe84"},"source":["# Не преобразуем в Bag Of Words\n","\n","# xTrain  = tokenizer.sequences_to_matrix(xTrainId.tolist())\n","# xTest  = tokenizer.sequences_to_matrix(xTestId.tolist())\n","\n","xTrain = xTrainId\n","xTest  = xTestId\n","xValidation = xValidationId\n","\n","print(\"Размерность обучайющей выборки\")\n","print(xTrain.shape)\n","print(yTrain.shape)\n","\n","print()\n","\n","print(\"Размерность тестовой выборки\")\n","print(xTest.shape)\n","print(yTest.shape)\n","\n","print()\n","\n","print(\"Размерность проверочной выборки\")\n","print(xValidation.shape)\n","print(yValidation.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размерность обучайющей выборки\n","(2065, 500)\n","(2065, 3)\n","\n","Размерность тестовой выборки\n","(256, 500)\n","(256, 3)\n","\n","Размерность проверочной выборки\n","(256, 500)\n","(256, 3)\n"]}]},{"cell_type":"markdown","metadata":{"id":"LKEckmaZQnkJ"},"source":["Нейросеть для классификации текстов на базе RNN"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5jTU1JvQjzh","executionInfo":{"status":"ok","timestamp":1638202891670,"user_tz":-180,"elapsed":3548,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"9fe6e54e-c994-44d4-b5c1-7647d89e24e5"},"source":["modelRNN = Sequential()\n","\n","modelRNN.add(Embedding(numWords, 5, input_length=xLen))\n","modelRNN.add(SpatialDropout1D(0.2))\n","modelRNN.add(BatchNormalization())\n","\n","modelRNN.add(SimpleRNN(16, dropout=0.2, recurrent_dropout=0.2, activation=\"relu\"))\n","modelRNN.add(Dense(3, activation='softmax'))\n","\n","modelRNN.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelRNN.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 500, 5)            100000    \n","                                                                 \n"," spatial_dropout1d (SpatialD  (None, 500, 5)           0         \n"," ropout1D)                                                       \n","                                                                 \n"," batch_normalization (BatchN  (None, 500, 5)           20        \n"," ormalization)                                                   \n","                                                                 \n"," simple_rnn (SimpleRNN)      (None, 16)                352       \n","                                                                 \n"," dense (Dense)               (None, 3)                 51        \n","                                                                 \n","=================================================================\n","Total params: 100,423\n","Trainable params: 100,413\n","Non-trainable params: 10\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kw0fZMnGQ3TE","executionInfo":{"status":"ok","timestamp":1638204546629,"user_tz":-180,"elapsed":361669,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"115a46da-6efc-4eb5-ea9d-b150d46ff03b"},"source":["# Обучаем сеть\n","historyRNN = modelRNN.fit(xTrain, \n","                          yTrain, \n","                          epochs=20,\n","                          batch_size=128,\n","                          validation_data= (xValidation, yValidation)\n","                          )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","17/17 [==============================] - 18s 1s/step - loss: 1.0076 - accuracy: 0.4857 - val_loss: 1.1033 - val_accuracy: 0.3164\n","Epoch 2/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.9822 - accuracy: 0.5051 - val_loss: 1.1044 - val_accuracy: 0.3164\n","Epoch 3/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.9677 - accuracy: 0.5293 - val_loss: 1.1051 - val_accuracy: 0.3164\n","Epoch 4/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.9245 - accuracy: 0.5535 - val_loss: 1.1065 - val_accuracy: 0.3164\n","Epoch 5/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.9008 - accuracy: 0.5952 - val_loss: 1.1080 - val_accuracy: 0.3164\n","Epoch 6/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.8708 - accuracy: 0.6044 - val_loss: 1.1098 - val_accuracy: 0.3164\n","Epoch 7/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.8357 - accuracy: 0.6358 - val_loss: 1.1125 - val_accuracy: 0.3203\n","Epoch 8/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.8015 - accuracy: 0.6513 - val_loss: 1.1151 - val_accuracy: 0.3242\n","Epoch 9/20\n","17/17 [==============================] - 17s 1s/step - loss: 0.7697 - accuracy: 0.6668 - val_loss: 1.1194 - val_accuracy: 0.3281\n","Epoch 10/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.7399 - accuracy: 0.6818 - val_loss: 1.1254 - val_accuracy: 0.3281\n","Epoch 11/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.6875 - accuracy: 0.7230 - val_loss: 1.1319 - val_accuracy: 0.3320\n","Epoch 12/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.6676 - accuracy: 0.7264 - val_loss: 1.1392 - val_accuracy: 0.3320\n","Epoch 13/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.6164 - accuracy: 0.7545 - val_loss: 1.1475 - val_accuracy: 0.3359\n","Epoch 14/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.5894 - accuracy: 0.7617 - val_loss: 1.1605 - val_accuracy: 0.3398\n","Epoch 15/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.5645 - accuracy: 0.7826 - val_loss: 1.1768 - val_accuracy: 0.3320\n","Epoch 16/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.5263 - accuracy: 0.7889 - val_loss: 1.1976 - val_accuracy: 0.3320\n","Epoch 17/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.5258 - accuracy: 0.7903 - val_loss: 1.2092 - val_accuracy: 0.3242\n","Epoch 18/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.4864 - accuracy: 0.8015 - val_loss: 1.2220 - val_accuracy: 0.3281\n","Epoch 19/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.4587 - accuracy: 0.8136 - val_loss: 1.2405 - val_accuracy: 0.3125\n","Epoch 20/20\n","17/17 [==============================] - 18s 1s/step - loss: 0.4388 - accuracy: 0.8213 - val_loss: 1.2691 - val_accuracy: 0.3047\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"H3Sakk0YQ7j4","executionInfo":{"status":"ok","timestamp":1638204583465,"user_tz":-180,"elapsed":483,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"3982d357-72a7-4e3a-b934-45110ad98af8"},"source":["# Результаты обучения\n","plt.plot(historyRNN.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyRNN.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"kwBAB-gmYLi2"},"source":["Нейросеть для классификации текстов на базе LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ls7ba8akZUzJ","executionInfo":{"status":"ok","timestamp":1638204589163,"user_tz":-180,"elapsed":681,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d5c1b667-6b99-4c3b-9d7f-6228563854c3"},"source":["modelLSTM = Sequential()\n","\n","modelLSTM.add(Embedding(numWords, 100, input_length=xLen))\n","modelLSTM.add(SpatialDropout1D(0.2))\n","modelLSTM.add(BatchNormalization())\n","\n","modelLSTM.add(LSTM(10))\n","modelLSTM.add(Dense(3, activation='softmax'))\n","\n","modelLSTM.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelLSTM.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_3 (Embedding)     (None, 500, 100)          2000000   \n","                                                                 \n"," spatial_dropout1d_3 (Spatia  (None, 500, 100)         0         \n"," lDropout1D)                                                     \n","                                                                 \n"," batch_normalization_3 (Batc  (None, 500, 100)         400       \n"," hNormalization)                                                 \n","                                                                 \n"," lstm_3 (LSTM)               (None, 10)                4440      \n","                                                                 \n"," dense_3 (Dense)             (None, 3)                 33        \n","                                                                 \n","=================================================================\n","Total params: 2,004,873\n","Trainable params: 2,004,673\n","Non-trainable params: 200\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z7G4CMhoZ7QS","executionInfo":{"status":"ok","timestamp":1638204629424,"user_tz":-180,"elapsed":35213,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"d4935af4-f3fe-4881-8433-843a50f1a3f0"},"source":["# Обучаем сеть\n","historyLSTM = modelLSTM.fit(xTrain, \n","                            yTrain, \n","                            epochs=20,\n","                            batch_size=128,\n","                            validation_data= (xValidation, yValidation)\n","                            )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","17/17 [==============================] - 5s 131ms/step - loss: 1.0936 - accuracy: 0.3738 - val_loss: 1.0984 - val_accuracy: 0.3203\n","Epoch 2/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.9237 - accuracy: 0.6576 - val_loss: 1.0980 - val_accuracy: 0.3125\n","Epoch 3/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.7482 - accuracy: 0.8150 - val_loss: 1.0953 - val_accuracy: 0.3086\n","Epoch 4/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.5535 - accuracy: 0.9128 - val_loss: 1.0874 - val_accuracy: 0.3320\n","Epoch 5/20\n","17/17 [==============================] - 2s 92ms/step - loss: 0.3563 - accuracy: 0.9642 - val_loss: 1.1336 - val_accuracy: 0.3750\n","Epoch 6/20\n","17/17 [==============================] - 2s 92ms/step - loss: 0.2102 - accuracy: 0.9816 - val_loss: 1.1431 - val_accuracy: 0.4570\n","Epoch 7/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.1284 - accuracy: 0.9893 - val_loss: 1.2545 - val_accuracy: 0.4453\n","Epoch 8/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.0915 - accuracy: 0.9913 - val_loss: 1.3397 - val_accuracy: 0.4219\n","Epoch 9/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0656 - accuracy: 0.9947 - val_loss: 1.3070 - val_accuracy: 0.4414\n","Epoch 10/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0543 - accuracy: 0.9947 - val_loss: 1.3715 - val_accuracy: 0.4023\n","Epoch 11/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.0446 - accuracy: 0.9937 - val_loss: 1.3818 - val_accuracy: 0.4180\n","Epoch 12/20\n","17/17 [==============================] - 2s 92ms/step - loss: 0.0369 - accuracy: 0.9961 - val_loss: 1.4384 - val_accuracy: 0.4102\n","Epoch 13/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0318 - accuracy: 0.9971 - val_loss: 1.3968 - val_accuracy: 0.4297\n","Epoch 14/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0278 - accuracy: 0.9981 - val_loss: 1.3712 - val_accuracy: 0.4453\n","Epoch 15/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.0253 - accuracy: 0.9981 - val_loss: 1.2933 - val_accuracy: 0.4727\n","Epoch 16/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0230 - accuracy: 0.9971 - val_loss: 1.3511 - val_accuracy: 0.4648\n","Epoch 17/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0211 - accuracy: 0.9976 - val_loss: 1.4081 - val_accuracy: 0.4453\n","Epoch 18/20\n","17/17 [==============================] - 2s 95ms/step - loss: 0.0198 - accuracy: 0.9981 - val_loss: 1.3823 - val_accuracy: 0.4648\n","Epoch 19/20\n","17/17 [==============================] - 2s 94ms/step - loss: 0.0178 - accuracy: 0.9976 - val_loss: 1.4484 - val_accuracy: 0.4570\n","Epoch 20/20\n","17/17 [==============================] - 2s 93ms/step - loss: 0.0177 - accuracy: 0.9966 - val_loss: 1.4154 - val_accuracy: 0.4766\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"TUs3q6JfaOQ1","executionInfo":{"status":"ok","timestamp":1638204649269,"user_tz":-180,"elapsed":509,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"fa752a0c-1759-498a-c400-7477cde44ed5"},"source":["# Результаты обучения\n","plt.plot(historyLSTM.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyLSTM.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1jgZwyDwRTVN"},"source":["Проверяем работу обученной нейросети LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4Nip_hUS1T9","executionInfo":{"status":"ok","timestamp":1638204655775,"user_tz":-180,"elapsed":1282,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"ebacfe19-6b7a-491f-dccd-fa67e709dd9c"},"source":["# Проверяем точность на тестовой выборке\n","\n","rightAnswer = [0,0,0]\n","totalAnswer = [0,0,0]\n","\n","# Получаем результаты распознавания для каждого класса\n","currPred = modelLSTM.predict(xTest)\n","# Определяем номер распознанного класса для каждохо вектора\n","currOut = np.argmax(currPred, axis=1)\n","# Определяем правильный класс для каждохо вектора\n","yOut = np.argmax(yTest, axis=1)\n","\n","print(currPred.shape)\n","print(currOut.shape)\n","print(yOut.shape)\n","print()\n","\n","\n","# Считаем сколько ответов всего и сколько из них правильных\n","for i in range(len(yOut)):\n","  predictA = currOut[i]\n","  rightA   = yOut[i]\n","\n","  totalAnswer[rightA] += 1\n","  if predictA == rightA:\n","    rightAnswer[rightA] += 1\n","\n","# Подсчитываем точность классификации\n","print(\"Точность распознавания текстов писателей\")\n","for i in range(labelsNum):\n","  print(\"{:12s}: {:3d} из {:3d} - {:3.2f}%\".format(labels[i], rightAnswer[i], totalAnswer[i], (rightAnswer[i]/totalAnswer[i]*100)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(256, 3)\n","(256,)\n","(256,)\n","\n","Точность распознавания текстов писателей\n","Negative    :  69 из  94 - 73.40%\n","Neutral     :  32 из  81 - 39.51%\n","Positive    :  21 из  81 - 25.93%\n"]}]},{"cell_type":"markdown","metadata":{"id":"ySmIOd1zb0Uo"},"source":["Нейросеть для классификации текстов на базе двух слоев LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YuZTcmyeb3ka","executionInfo":{"status":"ok","timestamp":1638204659823,"user_tz":-180,"elapsed":796,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"f30811b0-f5c8-4db8-fa80-7dec7e5d6a4b"},"source":["modelLSTM2 = Sequential()\n","\n","modelLSTM2.add(Embedding(numWords, 100, input_length=xLen))\n","modelLSTM2.add(SpatialDropout1D(0.2))\n","modelLSTM2.add(BatchNormalization())\n","\n","modelLSTM2.add(LSTM(10, return_sequences=1))\n","modelLSTM2.add(LSTM(5))\n","modelLSTM2.add(Dense(3, activation='softmax'))\n","\n","modelLSTM2.compile(optimizer='adam', \n","              loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","modelLSTM2.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_4 (Embedding)     (None, 500, 100)          2000000   \n","                                                                 \n"," spatial_dropout1d_4 (Spatia  (None, 500, 100)         0         \n"," lDropout1D)                                                     \n","                                                                 \n"," batch_normalization_4 (Batc  (None, 500, 100)         400       \n"," hNormalization)                                                 \n","                                                                 \n"," lstm_4 (LSTM)               (None, 500, 10)           4440      \n","                                                                 \n"," lstm_5 (LSTM)               (None, 5)                 320       \n","                                                                 \n"," dense_4 (Dense)             (None, 3)                 18        \n","                                                                 \n","=================================================================\n","Total params: 2,005,178\n","Trainable params: 2,004,978\n","Non-trainable params: 200\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"f24X95AhcCRo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638204738053,"user_tz":-180,"elapsed":66031,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"fd806b8c-7c7f-487e-ad01-bd5c112ae4ce"},"source":["# Обучаем сеть\n","historyLSTM2 = modelLSTM2.fit(xTrain, \n","                              yTrain, \n","                              epochs=20,\n","                              batch_size=128,\n","                              validation_data= (xValidation, yValidation)\n","                              )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","17/17 [==============================] - 4s 245ms/step - loss: 1.0813 - accuracy: 0.4252 - val_loss: 1.1069 - val_accuracy: 0.3164\n","Epoch 2/20\n","17/17 [==============================] - 3s 189ms/step - loss: 0.9755 - accuracy: 0.6513 - val_loss: 1.1027 - val_accuracy: 0.3164\n","Epoch 3/20\n","17/17 [==============================] - 3s 189ms/step - loss: 0.8330 - accuracy: 0.7850 - val_loss: 1.1221 - val_accuracy: 0.3164\n","Epoch 4/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.6584 - accuracy: 0.9056 - val_loss: 1.2195 - val_accuracy: 0.3125\n","Epoch 5/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.5064 - accuracy: 0.9559 - val_loss: 1.2987 - val_accuracy: 0.3203\n","Epoch 6/20\n","17/17 [==============================] - 3s 193ms/step - loss: 0.4007 - accuracy: 0.9753 - val_loss: 1.3794 - val_accuracy: 0.3125\n","Epoch 7/20\n","17/17 [==============================] - 3s 192ms/step - loss: 0.3253 - accuracy: 0.9787 - val_loss: 1.4923 - val_accuracy: 0.3242\n","Epoch 8/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.2667 - accuracy: 0.9845 - val_loss: 1.4537 - val_accuracy: 0.3047\n","Epoch 9/20\n","17/17 [==============================] - 3s 192ms/step - loss: 0.2223 - accuracy: 0.9879 - val_loss: 1.7461 - val_accuracy: 0.3164\n","Epoch 10/20\n","17/17 [==============================] - 3s 192ms/step - loss: 0.1926 - accuracy: 0.9869 - val_loss: 1.5966 - val_accuracy: 0.3438\n","Epoch 11/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.1673 - accuracy: 0.9908 - val_loss: 1.8376 - val_accuracy: 0.3203\n","Epoch 12/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.1482 - accuracy: 0.9903 - val_loss: 1.7018 - val_accuracy: 0.3320\n","Epoch 13/20\n","17/17 [==============================] - 3s 191ms/step - loss: 0.1341 - accuracy: 0.9908 - val_loss: 1.7879 - val_accuracy: 0.3164\n","Epoch 14/20\n","17/17 [==============================] - 3s 189ms/step - loss: 0.1211 - accuracy: 0.9937 - val_loss: 1.7543 - val_accuracy: 0.3633\n","Epoch 15/20\n","17/17 [==============================] - 3s 189ms/step - loss: 0.1129 - accuracy: 0.9908 - val_loss: 1.8511 - val_accuracy: 0.3281\n","Epoch 16/20\n","17/17 [==============================] - 3s 190ms/step - loss: 0.1040 - accuracy: 0.9923 - val_loss: 1.9084 - val_accuracy: 0.3477\n","Epoch 17/20\n","17/17 [==============================] - 3s 188ms/step - loss: 0.0969 - accuracy: 0.9908 - val_loss: 1.9969 - val_accuracy: 0.3398\n","Epoch 18/20\n","17/17 [==============================] - 3s 190ms/step - loss: 0.0905 - accuracy: 0.9923 - val_loss: 2.0241 - val_accuracy: 0.3281\n","Epoch 19/20\n","17/17 [==============================] - 3s 188ms/step - loss: 0.0850 - accuracy: 0.9942 - val_loss: 2.0898 - val_accuracy: 0.3164\n","Epoch 20/20\n","17/17 [==============================] - 3s 192ms/step - loss: 0.0784 - accuracy: 0.9947 - val_loss: 1.9925 - val_accuracy: 0.3281\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"AR3VA_FDch2s","executionInfo":{"status":"ok","timestamp":1638204741299,"user_tz":-180,"elapsed":654,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"b7b20161-ea87-45bb-c69f-c3f07bef181a"},"source":["# Результаты обучения\n","plt.plot(historyLSTM2.history['accuracy'], \n","         label='Доля верных ответов на обучающем наборе')\n","plt.plot(historyLSTM2.history['val_accuracy'], \n","         label='Доля верных ответов на проверочном наборе')\n","plt.xlabel('Эпоха обучения')\n","plt.ylabel('Доля верных ответов')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"4DyNTHrBcpqR"},"source":["Проверяем работу обученной нейросети с двумя слоями LSTM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EPoqHpIXctNX","executionInfo":{"status":"ok","timestamp":1638204745484,"user_tz":-180,"elapsed":1354,"user":{"displayName":"Глеб Колонин","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16800121630135430864"}},"outputId":"22962671-efe4-4223-9bd8-dcc6b3bdd94f"},"source":["# Проверяем точность на тестовой выборке\n","\n","rightAnswer = [0,0,0]\n","totalAnswer = [0,0,0]\n","\n","# Получаем результаты распознавания для каждого класса\n","currPred = modelLSTM2.predict(xTest)\n","# Определяем номер распознанного класса для каждохо вектора\n","currOut = np.argmax(currPred, axis=1)\n","# Определяем правильный класс для каждохо вектора\n","yOut = np.argmax(yTest, axis=1)\n","\n","print(currPred.shape)\n","print(currOut.shape)\n","print(yOut.shape)\n","print()\n","\n","\n","# Считаем сколько ответов всего и сколько из них правильных\n","for i in range(len(yOut)):\n","  predictA = currOut[i]\n","  rightA   = yOut[i]\n","\n","  totalAnswer[rightA] += 1\n","  if predictA == rightA:\n","    rightAnswer[rightA] += 1\n","\n","# Подсчитываем точность классификации\n","print(\"Точность распознавания тональности текстов\")\n","for i in range(labelsNum):\n","  print(\"{:12s}: {:3d} из {:3d} - {:3.2f}%\".format(labels[i], rightAnswer[i], totalAnswer[i], (rightAnswer[i]/totalAnswer[i]*100)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(256, 3)\n","(256,)\n","(256,)\n","\n","Точность распознавания тональности текстов\n","Negative    :   3 из  94 - 3.19%\n","Neutral     :  21 из  81 - 25.93%\n","Positive    :  60 из  81 - 74.07%\n"]}]}]}